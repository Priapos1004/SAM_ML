Search.setIndex({"docnames": ["abstract_classes/AutoML_class", "abstract_classes/BasePipeline_class", "abstract_classes/Classifier_class", "abstract_classes/Data_class", "abstract_classes/Model_class", "abstract_classes/Regressor_class", "automl/CTest", "automl/RTest", "automl/index", "classifier/AdaBoostClassifier_(ABC)", "classifier/BaggingClassifier_(BC)", "classifier/BernoulliNB_(BNB)", "classifier/DecisionTreeClassifier_(DTC)", "classifier/ExtraTreesClassifier_(ETC)", "classifier/GaussianNB_(GNB)", "classifier/GaussianProcessClassifier_(GPC)", "classifier/GradientBoostingMachine_(GBM)", "classifier/KNeighborsClassifier_(KNC)", "classifier/LinearDiscriminantAnalysis_(LDA)", "classifier/LinearSupportVectorClassifier_(LSVC)", "classifier/LogisticRegression_(LR)", "classifier/MLP_Classifier_(MLPC)", "classifier/QuadraticDiscriminantAnalysis_(QDA)", "classifier/RandomForestClassifier_(RFC)", "classifier/SupportVectorClassifier_(SVC)", "classifier/XGBClassifier_(XGBC)", "classifier/index", "global_variables", "index", "package_graph", "pipeline_factory", "preprocessing/Embeddings_builder", "preprocessing/Sampler", "preprocessing/SamplerPipeline", "preprocessing/Scaler", "preprocessing/Selector", "preprocessing/index", "regio_data", "regressor/BayesianRidge_(BYR)", "regressor/DecisionTreeRegressor_(DTR)", "regressor/ElasticNet_(EN)", "regressor/ExtraTreesRegressor_(ETR)", "regressor/LassoLarsCV_(LLCV)", "regressor/RandomForestRegressor_(RFR)", "regressor/SGDRegressor_(SGDR)", "regressor/XGBRegressor_(XGBR)", "regressor/index", "scoring", "swig_installation"], "filenames": ["abstract_classes/AutoML_class.rst", "abstract_classes/BasePipeline_class.rst", "abstract_classes/Classifier_class.rst", "abstract_classes/Data_class.rst", "abstract_classes/Model_class.rst", "abstract_classes/Regressor_class.rst", "automl/CTest.rst", "automl/RTest.rst", "automl/index.rst", "classifier/AdaBoostClassifier_(ABC).rst", "classifier/BaggingClassifier_(BC).rst", "classifier/BernoulliNB_(BNB).rst", "classifier/DecisionTreeClassifier_(DTC).rst", "classifier/ExtraTreesClassifier_(ETC).rst", "classifier/GaussianNB_(GNB).rst", "classifier/GaussianProcessClassifier_(GPC).rst", "classifier/GradientBoostingMachine_(GBM).rst", "classifier/KNeighborsClassifier_(KNC).rst", "classifier/LinearDiscriminantAnalysis_(LDA).rst", "classifier/LinearSupportVectorClassifier_(LSVC).rst", "classifier/LogisticRegression_(LR).rst", "classifier/MLP_Classifier_(MLPC).rst", "classifier/QuadraticDiscriminantAnalysis_(QDA).rst", "classifier/RandomForestClassifier_(RFC).rst", "classifier/SupportVectorClassifier_(SVC).rst", "classifier/XGBClassifier_(XGBC).rst", "classifier/index.rst", "global_variables.rst", "index.rst", "package_graph.rst", "pipeline_factory.rst", "preprocessing/Embeddings_builder.rst", "preprocessing/Sampler.rst", "preprocessing/SamplerPipeline.rst", "preprocessing/Scaler.rst", "preprocessing/Selector.rst", "preprocessing/index.rst", "regio_data.rst", "regressor/BayesianRidge_(BYR).rst", "regressor/DecisionTreeRegressor_(DTR).rst", "regressor/ElasticNet_(EN).rst", "regressor/ExtraTreesRegressor_(ETR).rst", "regressor/LassoLarsCV_(LLCV).rst", "regressor/RandomForestRegressor_(RFR).rst", "regressor/SGDRegressor_(SGDR).rst", "regressor/XGBRegressor_(XGBR).rst", "regressor/index.rst", "scoring.rst", "swig_installation.rst"], "titles": ["AutoML class", "BasePipeline class", "Classifier class", "Data class", "Model class", "Regressor class", "CTest", "RTest", "Auto-ML", "AdaBoostClassifier (ABC)", "BaggingClassifier (BC)", "BernoulliNB (BNB)", "DecisionTreeClassifier (DTC)", "ExtraTreesClassifier (ETC)", "GaussianNB (GNB)", "GaussianProcessClassifier (GPC)", "GradientBoostingMachine (GBM)", "KNeighborsClassifier (KNC)", "LinearDiscriminantAnalysis (LDA)", "LinearSupportVectorClassifier (LSVC)", "LogisticRegression (LR)", "MLP Classifier (MLPC)", "QuadraticDiscriminantAnalysis (QDA)", "RandomForestClassifier (RFC)", "SupportVectorClassifier (SVC)", "XGBClassifier (XGBC)", "Classifier", "Global Variables", "Welcome to sam-ml-py\u2019s documentation!", "Package Graph", "Pipeline Factory", "Embeddings_builder", "Sampler", "SamplerPipeline", "Scaler", "Selector", "Preprocessing", "Regio", "BayesianRidge (BYR)", "DecisionTreeRegressor (DTR)", "ElasticNet (EN)", "ExtraTreesRegressor (ETR)", "LassoLarsCV (LLCV)", "RandomForestRegressor (RFR)", "SGDRegressor (SGDR)", "XGBRegressor (XGBR)", "Regressor", "Scoring", "swig installation"], "terms": {"self": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "model": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "str": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "list": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45], "vector": [0, 1, 6, 7, 11, 30, 31], "sam_ml": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "data": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "preprocess": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "embed": [0, 1, 6, 7, 31], "embeddings_build": [0, 1, 6, 7, 30, 36], "none": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "scaler": [0, 1, 6, 7, 28, 30, 36], "selector": [0, 1, 6, 7, 28, 30, 36], "tupl": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45], "int": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "feature_select": [0, 1, 6, 7], "sampler": [0, 1, 6, 7, 28, 30, 33, 36], "sampl": [0, 1, 6, 7, 10, 11, 12, 13, 16, 23, 30, 32, 33, 36, 39, 41, 43], "sampling_pipelin": [0, 1, 6, 7], "samplerpipelin": [0, 1, 6, 7, 30, 36], "auto": [0, 1, 28, 32], "ml": [0, 6, 7], "parent": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "abstract": [0, 1, 2, 3, 4], "object": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "string": [0, 1, 6, 7, 27, 30, 31, 37], "set": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "from": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "model_comb": [0, 6, 7], "method": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "wrapperclass": [0, 6, 7], "librari": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "algorithm": [0, 1, 3, 6, 7, 9, 16, 17, 19, 20, 24, 28, 30, 31, 32, 33, 34, 35], "which": [0, 1, 2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 34, 35, 47], "us": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "automat": [0, 1, 6, 7, 30], "column": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "scale": [0, 1, 6, 7, 28, 30, 34], "featur": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45], "number": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 38, 39, 40, 41, 42, 43, 44, 45], "select": [0, 1, 6, 7, 13, 16, 19, 23, 30, 35, 36, 40, 41, 43], "train": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "attribut": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "dict": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "dictionari": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45], "name": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "kei": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "score": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45], "float": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45], "everi": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45, 47], "If": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "i": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "provid": [0, 6, 7], "one": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 38, 39, 40, 41, 42, 43, 44, 45, 47], "multipl": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "step": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 36, 38, 39, 40, 41, 42, 43, 44, 45], "all": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "combin": [0, 6, 7, 28], "ad": [0, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45], "pipelin": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "descript": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "_automl__finish_sound": 0, "littl": 0, "function": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "plai": [0, 47], "microwav": [0, 27], "sound": 0, "_automl__sort_dict": 0, "sort": [0, 6, 7, 28], "given": [0, 1, 2, 4, 5, 31, 35], "add_model": [0, 6, 7], "eval_model": [0, 6, 7], "evalu": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45, 47], "eval_models_cv": [0, 6, 7], "run": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "cross": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 39, 40, 41, 42, 43, 44, 45], "valid": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 39, 40, 41, 42, 43, 44, 45], "find_best_model_mass_search": [0, 6, 7], "success": [0, 6, 7], "halv": [0, 6, 7], "hyperparamet": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45, 47], "search": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "find_best_model_randomcv": [0, 6, 7, 28], "random": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45], "find_best_model_smac": [0, 6, 7], "hyperparametertun": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "smac": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 48], "hyperparameteroptimizationfacad": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "can": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45, 47], "onli": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "version": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "swig": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "map": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "output_scores_as_pd": [0, 6, 7, 28], "output": [0, 6, 7, 16, 27, 28], "pd": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "datafram": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "remove_model": [0, 6, 7], "delet": [0, 6, 7], "static": [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "sort_bi": [0, 6, 7, 28], "sorted_bi": [0, 6, 7], "you": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 47], "also": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45, 47], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "thei": [0, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "filter": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "out": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "scores_df": 0, "estim": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "add": [0, 6, 7], "x_train": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "y_train": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "seri": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "x_test": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "y_test": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "callabl": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "kwarg": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "custom": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "metric": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "loss": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "signatur": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "score_func": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 39, 40, 41, 42, 43, 44, 45], "y": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "y_pred": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "addit": [0, 1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "child": [0, 1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "save": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45], "interrupt": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "keyboard": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "dure": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "interim": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "result": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45, 47], "x": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "cv_num": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "small_data_ev": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "custom_scor": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "differ": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "split": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45], "when": [0, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "fals": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "true": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "cross_validation_small_data": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "v": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "otherwis": [0, 1, 5, 6, 7, 31, 34, 35], "calcul": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "doe": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "exist": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "n_trail": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "leave_loadbar": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "save_results_path": [0, 6, 7], "It": [0, 6, 7, 28], "warm_start": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "an": [0, 6, 7, 27, 28, 33], "own": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "implement": [0, 6, 7, 28, 30], "recommend": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45], "fast": [0, 6, 7], "narrow": [0, 6, 7], "down": [0, 6, 7, 33], "randomcvsearch": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "better": [0, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "optimis": [0, 6, 7, 28], "max": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "test": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "each": [0, 1, 2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 39, 41, 43], "shall": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 31, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47], "load": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "bar": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "visibl": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "after": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "still": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "save_result_path": [0, 6, 7], "path": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45], "train_warm_start": [0, 1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "evaluate_scor": [0, 1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "best_model_nam": [0, 6, 7], "best": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "datapoint": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "except": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "dataset": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "less": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "than": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45], "150": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "individu": [0, 6, 7, 16], "next": [0, 6, 7], "start": [0, 6, 7, 27], "walltime_limit_per_modeltyp": [0, 6, 7], "smac_log_level": [0, 6, 7], "The": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "smac_search": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "more": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "intellig": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "your": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45, 47], "space": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "addition": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "take": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "walltime_limit": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "defin": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "maximum": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "time": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 38, 39, 40, 41, 42, 43, 44, 45], "second": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "allow": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "10": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45], "debug": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "20": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 39, 40, 41, 42, 43, 44, 45], "info": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 38, 39, 40, 41, 42, 43, 44, 45], "30": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "warn": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "40": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 38, 39, 40, 41, 42, 43, 44, 45], "error": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "50": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "critic": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "smac3": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "log": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "level": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "kind": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "console_out": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "": [0, 6, 7, 15, 47], "print": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "model_nam": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 38, 39, 40, 41, 42, 43, 44, 45], "main_classifi": [1, 6], "classifi": [1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 38, 39, 40, 41, 42, 43, 44, 45], "main_regressor": [1, 7], "regressor": [1, 7, 8, 28, 29, 30, 38, 39, 40, 41, 42, 43, 44, 45], "cv_score": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "data_classes_train": 1, "fit": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "import": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "feature_nam": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "saw": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "empti": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "wa": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "yet": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "grid": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "configurationspac": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "tune": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "predict": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "set_param": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "get_param": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "see": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48], "sklearn": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "api": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "identifi": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "model_typ": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "e": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47], "g": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47], "rfc": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 38, 39, 40, 41, 42, 43, 44, 45], "randomforestclassifi": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 38, 39, 40, 41, 42, 43, 44, 45], "rcvsearch_result": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "randomcv": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "ani": [1, 3], "string_column": 1, "detect": 1, "train_scor": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "train_tim": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "format": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 39, 40, 41, 42, 43, 44, 45], "0": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "00": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45], "hour": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "minut": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "_auto_vector": 1, "creat": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45], "them": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45, 47], "_changed_paramet": [1, 2, 3, 4, 5], "get": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "default": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "ones": [1, 2, 4, 5, 6, 30], "_data_prepar": 1, "prepar": 1, "_get_all_scor": [1, 2, 4, 5], "y_true": [1, 4], "pair": [1, 2, 4, 5], "_get_scor": [1, 2, 4, 5], "_inherit_from_model": 1, "inherit": [1, 30], "_make_cv_scor": [1, 2, 4, 5], "crossvalid": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "_make_scor": [1, 2, 4, 5], "scorer": [1, 2, 4, 5], "_print_scor": [1, 2, 4, 5], "_validate_compon": 1, "cross_valid": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "One": [1, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "small": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "__get_scor": [1, 4], "feature_import": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "gener": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "matplotlib": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "plot": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45], "top45": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "fit_warm_start": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "get_deepcopi": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "deepcopi": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "get_random_config": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "configur": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "load_model": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "pickl": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "predict_proba": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "replace_grid": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "replac": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "save_model": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "train_on": [1, 31, 34, 35], "just": [1, 34, 35, 47], "transform": [1, 3, 22, 31, 32, 33, 34, 35, 36], "befor": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45], "x_vector": 1, "target": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "need": [1, 35], "contain": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46], "input": [1, 11, 29, 30], "alwai": [1, 30, 47], "fit_transform": [1, 34], "pred": [1, 2, 4, 5], "accuraci": [1, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 47], "precis": [1, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 38, 47], "recal": [1, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 47], "s_score": [1, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30], "l_score": [1, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30], "averag": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "restructur": [1, 2, 4, 5], "consol": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "key1": [1, 2, 4, 5], "value1": [1, 2, 4, 5], "key2": [1, 2, 4, 5], "value2": [1, 2, 4, 5], "compon": 1, "component_class": 1, "pipeline_class": 1, "__init__": 1, "like": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 38, 39, 40, 41, 42, 43, 44, 45], "current": 1, "make_scor": [1, 4], "In": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45, 47], "last": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "repeat": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "so": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "we": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "have": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45], "our": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "advantag": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "optim": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "inform": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "disadvantag": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "long": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "concept": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "veri": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "becaus": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45], "too": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "especi": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "amount": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "ha": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 38, 39, 40, 41, 42, 43, 44, 45], "classification_report": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "show": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "plt": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "panda": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "load_iri": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "df": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "lr": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 38, 39, 40, 41, 42, 43, 44, 45], "For": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 38, 39, 40, 41, 42, 43, 44, 45], "first": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "deep": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "sub": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "param": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "config": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "c": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "31489116479568624": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "penalti": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 35, 38, 39, 40, 41, 42, 43, 44, 45], "elasticnet": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 41, 42, 43, 44, 45, 46], "solver": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "saga": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "l1_ratio": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "6026718993550663": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "duplic": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "could": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "3": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47], "1": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "l2": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "lbfg": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "2": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "5378155082656657": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "801635158716261": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "suffix": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "pkl": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "np": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "ndarrai": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "probabl": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "per": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "best_hyperparamet": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "best_scor": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "new_grid": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "document": [1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "new": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 39, 40, 41, 42, 43, 44, 45], "old": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "chang": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 38, 39, 40, 41, 42, 43, 44, 45], "variabl": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 47], "configspac": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "categor": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "lda": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 38, 39, 40, 41, 42, 43, 44, 45], "seed": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 38, 39, 40, 41, 42, 43, 44, 45], "42": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "lsqr": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "eigen": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "shrinkag": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "5": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 33, 38, 39, 40, 41, 42, 43, 44, 45, 47], "only_estim": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "log_level": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "incumb": [1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "model_object": [2, 4, 5], "configuration_spac": [2, 4, 5], "_create_prediction_proba": 2, "convert": 2, "option": [2, 5], "evaluate_proba": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "binari": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 47], "classif": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 33], "evaluate_score_proba": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "pred_proba": 2, "With": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "increas": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "decreas": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "otherwai": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "around": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 47], "proba_stat": 2, "stat": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "min": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "proba": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "mean": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 47], "median": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "std": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "avg": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 47], "pos_label": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 47], "secondary_scor": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 47], "liter": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "strength": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 47], "micro": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 47], "macro": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 47], "weight": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 33, 35, 38, 47], "sai": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "higher": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 40, 44, 47], "prefer": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 47], "fit_tim": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "194662": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "295036": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "210156": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "233285": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "score_tim": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "167266": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "149569": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "173546": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "163460": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "test_precis": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "779381": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "809037": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "761263": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "783227": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "train_precis": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "951738": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "947397": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "943044": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "947393": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "test_recal": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "774488": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "800144": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "761423": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "778685": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "train_recal": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "948928": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "943901": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "940066": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "944298": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "test_accuraci": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "776978": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "803121": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "762305": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "780802": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "train_accuraci": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "950180": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "945411": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "941212": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "945601": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "test_s_scor": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "923052": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "937806": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "917214": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "926024": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "train_s_scor": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "990794": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "990162": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "989660": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "990206": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "test_l_scor": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "998393": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "998836": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "998575": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "998602": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "train_l_scor": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "000000": [2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31], "7": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "7747221430607011": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "672883787661406": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "40853182756324635": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "7812935895658734": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9946286670687757": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "report": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "f1": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "support": [2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "65": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "96": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "78": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "82": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "90": [2, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "38": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "54": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "68": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "70": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "77": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "67": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "66": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "76": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "model_select": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "train_test_split": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "train_siz": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "80": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "random_st": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45], "9891840171120917": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "02": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28], "802": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "8030604133545309": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "7957575757575757": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9395778023942218": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9990945415060262": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "81": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "73": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "225": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "86": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "83": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "275": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "500": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "make_classif": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33], "n_sampl": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "3000": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "n_featur": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "4": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47], "n_class": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33], "col1": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "col2": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "col3": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "col4": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "9775": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9733333333333334": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9728695961572674": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9742405994915028": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9930964441542017": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "9999999991441061": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "126066053780961e": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "12": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45, 47], "9999731025066587": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "4701783612343521": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "11068735707926472": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "474678546763958": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "99": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "97": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30], "318": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "282": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "600": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 38, 39, 40, 41, 42, 43, 44, 45], "f": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "initialis": [2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 38, 39, 40, 41, 42, 43, 44, 45], "best_hyperparam": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "8": [2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37], "471801418819979": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "newton": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "cg": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "765": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "abstract_initial_design": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "py": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "n_config": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "ignor": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 47], "n_configs_per_hyperparamet": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "147": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "initi": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "design": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "abstract_intensifi": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "305": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "determinist": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "scenario": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "515": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "12be8a": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "590": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "ce10f4": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "reject": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "b35335": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "smbo": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "327": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "budget": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "exhaust": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "328": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "remain": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "wallclock": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "5625982284546": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "329": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "cpu": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "inf": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "330": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "trial": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "7049177605834": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "both": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 38, 39, 40, 41, 42, 43, 44, 45, 47], "wrap": [2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45], "built": [3, 9, 10], "standardscal": [3, 31, 32, 33, 34, 35], "possibl": [3, 27, 31, 32, 33, 34, 35, 47], "rfr": [5, 38, 39, 40, 41, 42, 44, 45, 46], "randomforestregressor": [5, 7, 46], "r2": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "rmse": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "d2_tweedi": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "y_valu": 5, "make_regress": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "nois": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "ab": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "772634": [5, 38, 39, 40, 41, 42, 43, 44, 45], "903580": [5, 38, 39, 40, 41, 42, 43, 44, 45], "769893": [5, 38, 39, 40, 41, 42, 43, 44, 45], "815369": [5, 38, 39, 40, 41, 42, 43, 44, 45], "097742": [5, 38, 39, 40, 41, 42, 43, 44, 45], "126724": [5, 38, 39, 40, 41, 42, 43, 44, 45], "108220": [5, 38, 39, 40, 41, 42, 43, 44, 45], "110895": [5, 38, 39, 40, 41, 42, 43, 44, 45], "test_r2": [5, 38, 39, 40, 41, 42, 43, 44, 45], "930978": [5, 38, 39, 40, 41, 42, 43, 44, 45], "935554": [5, 38, 39, 40, 41, 42, 43, 44, 45], "950584": [5, 38, 39, 40, 41, 42, 43, 44, 45], "939039": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "train_r2": [5, 38, 39, 40, 41, 42, 43, 44, 45], "992086": [5, 38, 39, 40, 41, 42, 43, 44, 45], "992418": [5, 38, 39, 40, 41, 42, 43, 44, 45], "991672": [5, 38, 39, 40, 41, 42, 43, 44, 45], "992059": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "test_rms": [5, 38, 39, 40, 41, 42, 43, 44, 45], "13": [5, 6, 7, 28, 38, 39, 40, 41, 42, 43, 44, 45], "122513": [5, 38, 39, 40, 41, 42, 43, 44, 45], "076931": [5, 38, 39, 40, 41, 42, 43, 44, 45], "936810": [5, 38, 39, 40, 41, 42, 43, 44, 45], "045418": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "train_rms": [5, 38, 39, 40, 41, 42, 43, 44, 45], "306834": [5, 38, 39, 40, 41, 42, 43, 44, 45], "318027": [5, 38, 39, 40, 41, 42, 43, 44, 45], "457605": [5, 38, 39, 40, 41, 42, 43, 44, 45], "360822": [5, 38, 39, 40, 41, 42, 43, 44, 45], "test_d2": [5, 38, 39, 40, 41, 42, 43, 44, 45], "tweedi": [5, 38, 39, 40, 41, 42, 43, 44, 45], "916618": [5, 38, 39, 40, 41, 42, 43, 44, 45], "909032": [5, 38, 39, 40, 41, 42, 43, 44, 45], "919350": [5, 38, 39, 40, 41, 42, 43, 44, 45], "915000": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "train_d2": [5, 38, 39, 40, 41, 42, 43, 44, 45], "982802": [5, 38, 39, 40, 41, 42, 43, 44, 45], "983685": [5, 38, 39, 40, 41, 42, 43, 44, 45], "983286": [5, 38, 39, 40, 41, 42, 43, 44, 45], "983257": [5, 38, 39, 40, 41, 42, 43, 44, 45], "5914164661854215": [5, 38, 39, 40, 41, 42, 43, 44, 45], "2870203230133": [5, 38, 39, 40, 41, 42, 43, 44, 45], "58636121702529": [5, 38, 39, 40, 41, 42, 43, 44, 45], "9425178468662095": [5, 38, 39, 40, 41, 42, 43, 44, 45], "9938023719617127": [5, 38, 39, 40, 41, 42, 43, 44, 45], "01": [5, 6, 7, 28, 38, 39, 40, 41, 42, 43, 44, 45, 47], "9471767309072388": [5, 38, 39, 40, 41, 42, 43, 44, 45], "11": [5, 6, 7, 38, 39, 40, 41, 42, 43, 44, 45], "46914444113609": [5, 38, 39, 40, 41, 42, 43, 44, 45], "9214227488752569": [5, 38, 39, 40, 41, 42, 43, 44, 45], "bootstrap": [5, 7, 10, 13, 16, 23, 38, 39, 40, 41, 42, 43, 44, 45], "criterion": [5, 6, 7, 12, 13, 16, 23, 38, 39, 40, 41, 42, 43, 44, 45], "friedman_ms": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "max_depth": [5, 6, 7, 9, 10, 12, 13, 16, 23, 25, 38, 39, 40, 41, 42, 43, 44, 45], "9": [5, 6, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45], "min_samples_leaf": [5, 7, 12, 13, 16, 23, 38, 39, 40, 41, 42, 43, 44, 45], "min_samples_split": [5, 7, 12, 13, 16, 23, 38, 39, 40, 41, 42, 43, 44, 45], "min_weight_fraction_leaf": [5, 7, 38, 39, 40, 41, 42, 43, 44, 45], "015714592843367126": [5, 38, 39, 40, 41, 42, 43, 44, 45], "n_estim": [5, 6, 7, 9, 10, 13, 16, 23, 25, 38, 39, 40, 41, 42, 43, 44, 45], "117": [5, 38, 39, 40, 41, 42, 43, 44, 45], "6880857784416011": [5, 38, 39, 40, 41, 42, 43, 44, 45], "7373ff": [5, 38, 39, 40, 41, 42, 43, 44, 45], "06e4dc": [5, 38, 39, 40, 41, 42, 43, 44, 45], "162148": [5, 38, 39, 40, 41, 42, 43, 44, 45], "97eecc": [5, 38, 39, 40, 41, 42, 43, 44, 45], "582": [5, 38, 39, 40, 41, 42, 43, 44, 45], "9456326961517": [5, 38, 39, 40, 41, 42, 43, 44, 45], "22684614269623157": [5, 38, 39, 40, 41, 42, 43, 44, 45], "28": [5, 38, 39, 40, 41, 42, 43, 44, 45], "class": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47], "big_data": 6, "basic": 6, "basic2": 6, "automl": [6, 7, 8, 28], "18": [6, 7, 37], "much": [6, 47], "big": [6, 28], "200": 6, "000": 6, "point": 6, "includ": [6, 47], "logisticregress": [6, 26, 28], "mlp": [6, 26], "linearsvc": [6, 35], "decisiontreeclassifi": [6, 9, 10, 26], "svc": [6, 26], "gradientboostingmachin": [6, 26], "kneighborsclassifi": [6, 26, 28], "mostli": 6, "tree": [6, 9, 12, 13, 16, 23, 39, 41, 43], "base": [6, 9, 10, 16, 28, 29, 30, 35], "A": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "lot": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "advanc": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28], "auot": [6, 7, 28], "standard": [6, 7, 28, 30, 34], "ro": [6, 28, 32], "modeltyp": [6, 7], "score_df": [6, 7, 28], "adaboostclassifi": [6, 26, 28], "vec": [6, 7, 28], "981667": [6, 28], "925926": 6, "877193": [6, 28], "982953": 6, "999998": [6, 28], "994996": 6, "xgbclassifi": [6, 26, 28], "selec": [6, 28], "995061": [6, 28], "extratreesclassifi": [6, 26], "980000": [6, 28], "941176": 6, "842105": 6, "981653": 6, "999987": 6, "standa": 6, "909091": [6, 28], "980948": [6, 28], "type": [6, 7, 24, 28], "983333": [6, 28], "943567": 6, "893781": 6, "984974": 6, "999999": 6, "983667": 6, "947069": 6, "894857": 6, "984930": 6, "999833": 6, "983000": 6, "943373": 6, "891329": 6, "984505": 6, "980667": 6, "932792": 6, "878323": 6, "982539": 6, "999996": 6, "find_best_model_mass_search_result": [6, 7], "csv": [6, 7, 37], "find": [6, 7, 47], "2023": [6, 7, 28, 37], "16": 6, "14": 6, "33": [6, 7], "352": 6, "main_auto_ml": [6, 7, 28], "quadraticdiscriminantanalysi": [6, 26, 28], "skip": [6, 7], "354": 6, "lineardiscriminantanalysi": [6, 26], "493": 6, "total": [6, 7], "6": [6, 7, 34], "split_siz": [6, 7], "342": 6, "length": [6, 7, 34, 35], "2058": 6, "548": 6, "9693235800399905": 6, "574": 6, "9728086992300002": 6, "63": 6, "512210106407046": 6, "53": 6, "863": 6, "top": [6, 7, 37], "baggingclassifi": [6, 26], "dtc": [6, 9, 10, 26, 28, 30], "97862": 6, "956098": 6, "848485": 6, "983412": 6, "99999": 6, "97371": 6, "gaussianprocessclassifi": [6, 26], "sta": 6, "977648": 6, "938389": 6, "857143": 6, "982668": 6, "999994": 6, "971741": 6, "39": [6, 7, 32], "43": [6, 7], "242": 6, "remov": [6, 7], "243": 6, "1716": 6, "9711723626069725": 6, "299": 6, "9720794877353701": 6, "56": 6, "237": 6, "25": [6, 7], "238": 6, "1374": 6, "59": 6, "039": 6, "041": 6, "1032": 6, "704": 6, "705": 6, "690": 6, "124": 6, "126": 6, "348": 6, "369": [6, 7], "370": 6, "colsample_bytre": [6, 7, 25, 28, 45], "gamma": [6, 7, 24, 25, 28, 45], "learning_r": [6, 7, 9, 16, 21, 25, 45], "min_child_weight": [6, 7, 25, 45], "100": [6, 7, 28, 47], "reg_alpha": [6, 7, 25, 45], "reg_lambda": [6, 7, 25, 45], "9783333333333334": 6, "94": [6, 30], "8245614035087719": 6, "9796565264661882": 6, "9999699295994755": 6, "98": [6, 30], "543": [6, 30], "88": 6, "57": [6, 28, 30], "91": [6, 30], "93": 6, "74it": [6, 28], "08": [6, 7, 28], "21": [6, 7, 28], "721": [6, 28], "8114282933429915": [6, 28], "19": [6, 7, 28], "47it": [6, 28], "58": [6, 28], "010": [6, 28], "8788135203591323": [6, 28], "reg_param": [6, 22, 28], "rcv": [6, 7, 28], "943396": [6, 28], "984656": [6, 28], "985320": [6, 28], "samm": [6, 28], "estimator__max_depth": [6, 28], "984980": [6, 28], "942308": [6, 28], "859649": [6, 28], "983298": [6, 28], "999995": [6, 28], "994929": [6, 28], "985982": [6, 28], "learn": [6, 7, 9, 11, 16, 21, 28, 30], "978702": [6, 28], "leaf_siz": [6, 17, 28], "37": [6, 7, 28], "n_neighbor": [6, 17, 28], "p": [6, 17, 28, 35], "w": [6, 28], "07": [6, 37], "878": 6, "521010951219768": 6, "sag": 6, "110": 6, "5455330852419138": 6, "stand": 6, "986667": 6, "962264": 6, "894737": 6, "987177": 6, "squared_error": [6, 7], "06": [6, 7], "sele": 6, "883333": 6, "929825": 6, "979544": 6, "04": [6, 7], "989968": 6, "activ": [6, 21], "relu": 6, "alpha": [6, 21, 38, 44], "031488905303": 6, "978333": 6, "958333": 6, "807018": 6, "978841": 6, "999937": 6, "index": [6, 7], "ascend": [6, 7], "extratreesregressor": [7, 46], "973874": 7, "065976": 7, "954158": 7, "standar": 7, "947177": 7, "469144": 7, "921423": 7, "992563": 7, "xgbregressor": [7, 46], "945507": 7, "648970": 7, "995029": 7, "decisiontreeregressor": [7, 46], "872008": 7, "17": 7, "852977": 7, "788164": 7, "968637": 7, "620645": 7, "947802": 7, "940348": 7, "946437": 7, "905749": 7, "996965": 7, "834557": 7, "894214": 7, "752740": 7, "find_best_model_sma": 7, "599": 7, "618": 7, "lassolarscv": [7, 46], "678": 7, "400": 7, "685": 7, "2000": [7, 37], "05": 7, "032": 7, "5096384300695788": 7, "302": 7, "8496957972325866": 7, "09": 7, "366": 7, "849696": 7, "83303": 7, "793563": 7, "994897": 7, "80944": 7, "205614": 7, "977253": 7, "368": 7, "1600": [7, 37], "429": 7, "5117121227247716": 7, "413": 7, "8989539000553437": 7, "134": 7, "135": 7, "1200": 7, "401": 7, "402": 7, "800": [7, 37], "706": 7, "707": 7, "9330880728874675": 7, "7381801866358395": 7, "08810003129071789": 7, "314": 7, "49": 7, "7722447692966574": 7, "8767084599472158": 7, "52205436361105": 7, "8295259477160681": 7, "89it": 7, "284": 7, "5568605014361813": 7, "31": 7, "959": 7, "38132412930754": 7, "max_featur": [7, 10, 13, 16, 23, 41, 43], "max_leaf_nod": 7, "splitter": 7, "949305": 7, "235687": 7, "903326": 7, "983904": 7, "930262": 7, "558927": 7, "141604": 7, "466038": 7, "634854": 7, "556861": 7, "squared_erro": 7, "473561": 7, "36": 7, "207000": 7, "412317": 7, "513346": 7, "486602": 7, "squared_err": 7, "431751": 7, "617306": 7, "345249": 7, "522676": 7, "381324": 7, "32": 7, "189": 7, "06446314882742665": 7, "663": 7, "sqrt": [7, 47], "051022405374014035": 7, "946443": 7, "548574": 7, "904768": 7, "996710": 7, "8229470565333281": 7, "gamm": 7, "295580": 7, "41": [7, 32], "882669": 7, "302303": 7, "357833": 7, "friedman_m": 7, "276265": 7, "452967": 7, "289315": 7, "314012": 7, "193540": 7, "44": 7, "813584": 7, "187723": 7, "222682": 7, "modul": [8, 26, 28, 36, 37, 46], "two": [8, 28, 47], "ctest": [8, 27, 28], "rtest": 8, "classifiermixin": [9, 10], "wrapper": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46], "boost": [9, 10, 16], "ensembl": [9, 10], "stage": [9, 10, 16], "perform": [9, 10, 16, 42, 47], "shrink": [9, 16], "contribut": [9, 16], "rate": [9, 16, 21], "n_job": [10, 13, 15, 23, 25, 41, 43, 45], "max_sampl": 10, "draw": 10, "whether": [10, 11], "drawn": 10, "without": [10, 31, 32, 33, 34, 35], "bootstrap_featur": 10, "binar": 11, "threshold": 11, "boolean": 11, "presum": 11, "alreadi": [11, 28], "consist": 11, "fit_prior": 11, "prior": [11, 14], "uniform": 11, "measur": [12, 13, 16, 23, 39, 41, 43], "qualiti": [12, 13, 16, 23, 39, 41, 43], "minimum": [12, 13, 16, 23, 39, 41, 43], "requir": [12, 13, 16, 23, 39, 41, 43], "node": [12, 13, 16, 23, 39, 41, 43], "leaf": [12, 13, 16, 17, 23, 39, 41, 43], "plot_tre": [12, 30, 39], "decis": [12, 39], "structur": [12, 39], "directli": [12, 28, 39], "annot": [12, 39], "artist": [12, 39], "box": [12, 39], "make": [12, 27, 28, 39], "up": [12, 32, 33, 39], "consid": [13, 16, 23, 41, 43], "specifi": [14, 15, 19, 20, 44], "adjust": 14, "accord": 14, "var_smooth": 14, "portion": 14, "largest": 14, "varianc": 14, "stabil": 14, "multi_class": 15, "how": [15, 47], "multi": 15, "problem": [15, 19, 20, 28, 35], "handl": [15, 47], "max_iter_predict": 15, "iter": [15, 19, 20, 21, 40, 42], "approxim": 15, "posterior": 15, "subsampl": [16, 25, 45], "fraction": 16, "learner": 16, "devianc": 16, "refer": 16, "logist": 16, "regress": [16, 28], "probabilist": 16, "exponenti": 16, "gradient": 16, "recov": 16, "adaboost": 16, "neighbor": 17, "kneighbor": 17, "queri": 17, "comput": 17, "nearest": 17, "size": [17, 21, 32, 33], "pass": 17, "balltre": 17, "kdtree": 17, "manhattan": 17, "euclidean": 17, "minkowski": 17, "work": [18, 33], "svd": 18, "norm": [19, 20, 44], "penal": [19, 20], "dual": [19, 35], "either": 19, "solv": 19, "primal": 19, "invers": [19, 20, 24], "regular": [19, 20, 21, 22, 24, 44], "max_it": [19, 20, 21, 42], "taken": [19, 20, 21], "converg": [19, 20, 21, 40], "tol": [20, 21, 40], "toler": [20, 21], "stop": [20, 21], "criteria": [20, 21], "hidden_layer_s": 21, "ith": 21, "element": 21, "repres": 21, "neuron": 21, "hidden": 21, "layer": 21, "term": [21, 44], "schedul": 21, "updat": [21, 40], "batch_siz": 21, "minibatch": 21, "stochast": 21, "early_stop": 21, "n_iter_no_chang": 21, "improv": [21, 47], "covari": 22, "kernel": 24, "rbf": 24, "coeffici": [24, 40], "poli": 24, "sigmoid": 24, "class_weight": 24, "balanc": 24, "deal": 24, "imbalanc": 24, "enabl": 24, "svm": 24, "xgboostclassifi": 25, "base_scor": [25, 45], "booster": [25, 45], "callback": [25, 45], "colsample_bylevel": [25, 45], "colsample_bynod": [25, 45], "devic": [25, 45], "early_stopping_round": [25, 45], "enable_categor": [25, 45], "eval_metr": [25, 45], "feature_typ": [25, 45], "grow_polici": [25, 45], "importance_typ": [25, 45], "interaction_constraint": [25, 45], "max_bin": [25, 45], "max_cat_threshold": [25, 45], "max_cat_to_onehot": [25, 45], "max_delta_step": [25, 45], "max_leav": [25, 45], "miss": [25, 45], "nan": [25, 45], "monotone_constraint": [25, 45], "multi_strategi": [25, 45], "num_parallel_tre": [25, 45], "sampling_method": [25, 45], "scale_pos_weight": [25, 45], "tree_method": [25, 45], "validate_paramet": [25, 45], "verbos": [25, 45], "sever": [26, 36, 46], "abc": 26, "bc": 26, "bernoullinb": 26, "bnb": 26, "etc": 26, "gaussiannb": 26, "gnb": 26, "gpc": 26, "gbm": 26, "knc": 26, "linearsupportvectorclassifi": 26, "lsvc": 26, "mlpc": 26, "qda": 26, "supportvectorclassifi": 26, "xgbc": 26, "some": [27, 32, 33, 47], "modifi": 27, "want": [27, 28, 47], "environ": 27, "sam_ml_log_level": 27, "exampl": [27, 28, 47], "o": 27, "paramet": [27, 28, 47], "parallel": [27, 31], "capac": 27, "sam_ml_n_job": 27, "parallelis": 27, "posit": 27, "integ": 27, "worker": 27, "issu": 27, "window": 27, "virtual": 27, "machin": [27, 28, 30], "finish": 27, "scientist": 27, "know": 27, "he": 27, "she": 27, "do": [27, 47], "someth": 27, "els": 27, "coffe": 27, "break": 27, "sam_ml_sound_on": 27, "audio": 27, "github": 27, "action": 27, "follow": [27, 47], "code": [27, 47], "worri": 27, "about": 27, "sam_ml_avg": 27, "sam_ml_pos_label": 27, "greater": 27, "equal": 27, "sam_ml_scor": 27, "sam_ml_secondary_scor": 27, "sam_ml_strength": 27, "help": [28, 37, 47], "easier": 28, "approach": 28, "There": 28, "pip": 28, "with_swig": 28, "jump": 28, "utilis": 28, "power": [28, 34], "Or": 28, "overview": 28, "interrelationship": 28, "packag": 28, "graph": 28, "read": 28, "biggest": 28, "As": 28, "mention": 28, "anoth": 28, "here": 28, "label": [28, 37], "underrepres": 28, "factori": 29, "create_pipelin": [29, 30], "dynamicpipelin": [29, 30], "dynam": [29, 30], "special": 30, "pipe": 30, "basepipelin": 30, "futur": 30, "smote_rus_20_50": [30, 33], "9625": 30, "9583333333333334": 30, "8563762626262625": 30, "9377241446156828": 30, "9603691957893064": 30, "9989822522866367": 30, "72": 30, "89": 30, "bert": 31, "count": [31, 32, 33], "tfidf": 31, "countvector": 31, "tfidfvector": 31, "sentencetransform": 31, "quora": 31, "distilbert": 31, "multilingu": 31, "create_parallel_bert_embed": 31, "text": 31, "content": 31, "content_embed": 31, "wai": [31, 32, 33, 34, 35], "params1": [31, 32, 33, 34, 35], "params2": [31, 32, 33, 34, 35], "build": 31, "emb_df": 31, "hallo": 31, "world": 31, "goodby": 31, "island": 31, "greet": 31, "berlin": 31, "0_text": 31, "1_text": 31, "2_text": 31, "3_text": 31, "4_text": 31, "5_text": 31, "707107": 31, "smote": [32, 33], "bsmote": 32, "ru": [32, 33], "tl": 32, "nm": 32, "cc": 32, "oss": 32, "sampling_strategi": [32, 33], "defautl": [32, 34], "synthet": 32, "minor": [32, 33], "oversampl": 32, "techniqu": 32, "upsampl": 32, "borderlinesmot": 32, "randomoversampl": [32, 33], "randomundersampl": [32, 33], "downsampl": [32, 33], "tomeklink": 32, "clean": 32, "nearmiss": 32, "clustercentroid": 32, "onesidedselect": 32, "percentag": [32, 33], "relat": [32, 33], "major": [32, 33], "x_train_sampl": [32, 33], "y_train_sampl": [32, 33], "never": [32, 33], "well": [32, 33, 47], "value_count": [32, 33], "dtype": [32, 33, 34, 37], "int64": [32, 33], "multpli": 33, "instead": 33, "a1_a2_": 33, "_an_x1_x2_": 33, "_xn": 33, "a1": 33, "a2": 33, "x1": 33, "x2": 33, "until": 33, "xn": 33, "ros_rus_10_50": 33, "other": [33, 47], "2140": 33, "260": 33, "856": 33, "428": 33, "minmax": 34, "maxab": 34, "robust": 34, "normal": [34, 47], "quantil": 34, "quantile_norm": 34, "minmaxscal": 34, "maxabsscal": 34, "robustscal": 34, "powertransform": 34, "yeo": 34, "johnson": 34, "quantiletransform": 34, "output_distribut": 34, "gaussian": 34, "pdf": 34, "normalis": 34, "scaled_df": 34, "x_train_scal": 34, "x_test_scal": 34, "iloc": 34, "sepal": [34, 35], "cm": [34, 35], "width": [34, 35], "petal": [34, 35], "22": 34, "float64": 34, "473937": 34, "203658": 34, "562535": 34, "312603": 34, "kbest": 35, "kbest_chi2": 35, "pca": 35, "sequenti": [35, 40], "select_model": 35, "rfe": 35, "rfecv": 35, "num_featur": 35, "l1": 35, "selectkbest": 35, "chi2": 35, "non": 35, "neg": 35, "ordinari": 35, "linear": 35, "statsmodel": 35, "mani": 35, "sequentialfeatureselector": 35, "selectfrommodel": 35, "meta": 35, "recurs": 35, "elimin": 35, "selected_featur": 35, "correct": 35, "x_select": 35, "x_train_select": 35, "x_test_select": 35, "task": 36, "process": 37, "germani": 37, "visualise_plz": 37, "visualis": 37, "zipcod": 37, "get_plz_map": 37, "ort": 37, "postleitzahl": 37, "landkrei": 37, "bundesland": 37, "get_coord_main_c": 37, "coordin": 37, "citi": 37, "top_citi": 37, "english": 37, "german": 37, "df_map": 37, "plz": 37, "sourc": 37, "http": 37, "www": 37, "suche": 37, "org": 37, "download": 37, "zuordnung_plz_ort": 37, "aach": 37, "78267": 37, "konstanz": 37, "baden": 37, "w\u00fcrttemberg": 37, "54298": 37, "trier": 37, "saarburg": 37, "rheinland": 37, "pfalz": 37, "plz_region_df": 37, "plot_col_nam": 37, "plot_path": 37, "german_map": 37, "png": 37, "plot_titl": 37, "titl": 37, "genauigkeit": 37, "mittel": 37, "uniqu": 37, "legend": 37, "52062": 37, "52064": 37, "52066": 37, "52068": 37, "52070": 37, "52072": 37, "52074": 37, "52076": 37, "incom": 37, "1400": 37, "700": 37, "2400": 37, "300": 37, "1000": 37, "colorbar": 37, "alpha_init": 38, "lambda_init": 38, "lambda": 38, "rather": 40, "loop": 40, "over": 40, "often": 40, "lead": [40, 47], "significantli": 40, "faster": 40, "1e": 40, "constant": 44, "multipli": [44, 47], "stronger": [44, 47], "xgboostregressor": 45, "bayesianridg": 46, "byr": 46, "dtr": 46, "en": 46, "etr": 46, "llcv": 46, "sgdregressor": 46, "sgdr": 46, "xgbr": 46, "priorit": 47, "below": 47, "onc": 47, "begin": 47, "global": 47, "good": 47, "core": 47, "idea": 47, "compar": 47, "punish": 47, "realli": 47, "bad": 47, "appli": 47, "rescal": 47, "afterward": 47, "potenti": 47, "frac": 47, "exp": 47, "left": 47, "cdot": 47, "right": 47, "l": 47, "co": 47, "pi": 47, "between": 47, "account": 47, "same": 47, "lose": 47, "prevent": 47, "now": 47, "affect": 47, "relev": 47, "misinterpret": 47, "guid": 48, "apt": 48, "homebrew": 48, "brew": 48, "swigwin": 48}, "objects": {"": [[9, 0, 1, "", "ABC"], [0, 0, 1, "", "AutoML"], [10, 0, 1, "", "BC"], [11, 0, 1, "", "BNB"], [38, 0, 1, "", "BYR"], [1, 0, 1, "", "BasePipeline"], [6, 0, 1, "", "CTest"], [2, 0, 1, "", "Classifier"], [12, 0, 1, "", "DTC"], [39, 0, 1, "", "DTR"], [3, 0, 1, "", "Data"], [40, 0, 1, "", "EN"], [13, 0, 1, "", "ETC"], [41, 0, 1, "", "ETR"], [31, 0, 1, "", "Embeddings_builder"], [16, 0, 1, "", "GBM"], [14, 0, 1, "", "GNB"], [15, 0, 1, "", "GPC"], [17, 0, 1, "", "KNC"], [18, 0, 1, "", "LDA"], [42, 0, 1, "", "LLCV"], [20, 0, 1, "", "LR"], [19, 0, 1, "", "LSVC"], [21, 0, 1, "", "MLPC"], [4, 0, 1, "", "Model"], [22, 0, 1, "", "QDA"], [23, 0, 1, "", "RFC"], [43, 0, 1, "", "RFR"], [7, 0, 1, "", "RTest"], [5, 0, 1, "", "Regressor"], [44, 0, 1, "", "SGDR"], [24, 0, 1, "", "SVC"], [32, 0, 1, "", "Sampler"], [33, 0, 1, "", "SamplerPipeline"], [34, 0, 1, "", "Scaler"], [35, 0, 1, "", "Selector"], [25, 0, 1, "", "XGBC"], [45, 0, 1, "", "XGBR"]], "sam_ml.data.main_data.Data": [[3, 1, 1, "", "_changed_parameters"], [3, 1, 1, "", "get_params"], [3, 1, 1, "", "params"], [3, 1, 1, "", "set_params"]], "sam_ml.data.preprocessing.embeddings.Embeddings_builder": [[31, 1, 1, "", "create_parallel_bert_embeddings"], [31, 1, 1, "", "get_params"], [31, 1, 1, "", "params"], [31, 1, 1, "", "set_params"], [31, 1, 1, "", "vectorize"]], "sam_ml.data.preprocessing.feature_selection.Selector": [[35, 1, 1, "", "get_params"], [35, 1, 1, "", "params"], [35, 1, 1, "", "select"], [35, 1, 1, "", "set_params"]], "sam_ml.data.preprocessing.sampling.Sampler": [[32, 1, 1, "", "get_params"], [32, 1, 1, "", "params"], [32, 1, 1, "", "sample"], [32, 1, 1, "", "set_params"]], "sam_ml.data.preprocessing.sampling_pipeline.SamplerPipeline": [[33, 1, 1, "", "get_params"], [33, 1, 1, "", "params"], [33, 1, 1, "", "sample"], [33, 1, 1, "", "set_params"]], "sam_ml.data.preprocessing.scaler.Scaler": [[34, 1, 1, "", "get_params"], [34, 1, 1, "", "params"], [34, 1, 1, "", "scale"], [34, 1, 1, "", "set_params"]], "sam_ml.data": [[37, 2, 0, "-", "regio"]], "sam_ml.data.regio": [[37, 3, 1, "", "get_coord_main_cities"], [37, 3, 1, "", "get_plz_mapping"], [37, 3, 1, "", "visualise_plz"]], "sam_ml.models.automl.ClassifierTest.CTest": [[6, 1, 1, "", "add_model"], [6, 1, 1, "", "eval_models"], [6, 1, 1, "", "eval_models_cv"], [6, 1, 1, "", "find_best_model_mass_search"], [6, 1, 1, "", "find_best_model_randomCV"], [6, 1, 1, "", "find_best_model_smac"], [6, 1, 1, "", "model_combs"], [6, 1, 1, "", "output_scores_as_pd"], [6, 1, 1, "", "remove_model"]], "sam_ml.models.automl.RegressorTest.RTest": [[7, 1, 1, "", "add_model"], [7, 1, 1, "", "eval_models"], [7, 1, 1, "", "eval_models_cv"], [7, 1, 1, "", "find_best_model_mass_search"], [7, 1, 1, "", "find_best_model_randomCV"], [7, 1, 1, "", "find_best_model_smac"], [7, 1, 1, "", "model_combs"], [7, 1, 1, "", "output_scores_as_pd"], [7, 1, 1, "", "remove_model"]], "sam_ml.models.classifier.AdaBoostClassifier.ABC": [[9, 1, 1, "", "cross_validation"], [9, 1, 1, "", "cross_validation_small_data"], [9, 1, 1, "", "evaluate"], [9, 1, 1, "", "evaluate_proba"], [9, 1, 1, "", "evaluate_score"], [9, 1, 1, "", "evaluate_score_proba"], [9, 1, 1, "", "feature_importance"], [9, 1, 1, "", "fit"], [9, 1, 1, "", "fit_warm_start"], [9, 1, 1, "", "get_deepcopy"], [9, 1, 1, "", "get_params"], [9, 1, 1, "", "get_random_config"], [9, 1, 1, "", "get_random_configs"], [9, 1, 1, "", "load_model"], [9, 1, 1, "", "predict"], [9, 1, 1, "", "predict_proba"], [9, 1, 1, "", "randomCVsearch"], [9, 1, 1, "", "replace_grid"], [9, 1, 1, "", "save_model"], [9, 1, 1, "", "set_params"], [9, 1, 1, "", "smac_search"], [9, 1, 1, "", "train"], [9, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.BaggingClassifier.BC": [[10, 1, 1, "", "cross_validation"], [10, 1, 1, "", "cross_validation_small_data"], [10, 1, 1, "", "evaluate"], [10, 1, 1, "", "evaluate_proba"], [10, 1, 1, "", "evaluate_score"], [10, 1, 1, "", "evaluate_score_proba"], [10, 1, 1, "", "feature_importance"], [10, 1, 1, "", "fit"], [10, 1, 1, "", "fit_warm_start"], [10, 1, 1, "", "get_deepcopy"], [10, 1, 1, "", "get_params"], [10, 1, 1, "", "get_random_config"], [10, 1, 1, "", "get_random_configs"], [10, 1, 1, "", "load_model"], [10, 1, 1, "", "predict"], [10, 1, 1, "", "predict_proba"], [10, 1, 1, "", "randomCVsearch"], [10, 1, 1, "", "replace_grid"], [10, 1, 1, "", "save_model"], [10, 1, 1, "", "set_params"], [10, 1, 1, "", "smac_search"], [10, 1, 1, "", "train"], [10, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.BernoulliNB.BNB": [[11, 1, 1, "", "cross_validation"], [11, 1, 1, "", "cross_validation_small_data"], [11, 1, 1, "", "evaluate"], [11, 1, 1, "", "evaluate_proba"], [11, 1, 1, "", "evaluate_score"], [11, 1, 1, "", "evaluate_score_proba"], [11, 1, 1, "", "feature_importance"], [11, 1, 1, "", "fit"], [11, 1, 1, "", "fit_warm_start"], [11, 1, 1, "", "get_deepcopy"], [11, 1, 1, "", "get_params"], [11, 1, 1, "", "get_random_config"], [11, 1, 1, "", "get_random_configs"], [11, 1, 1, "", "load_model"], [11, 1, 1, "", "predict"], [11, 1, 1, "", "predict_proba"], [11, 1, 1, "", "randomCVsearch"], [11, 1, 1, "", "replace_grid"], [11, 1, 1, "", "save_model"], [11, 1, 1, "", "set_params"], [11, 1, 1, "", "smac_search"], [11, 1, 1, "", "train"], [11, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.DecisionTreeClassifier.DTC": [[12, 1, 1, "", "cross_validation"], [12, 1, 1, "", "cross_validation_small_data"], [12, 1, 1, "", "evaluate"], [12, 1, 1, "", "evaluate_proba"], [12, 1, 1, "", "evaluate_score"], [12, 1, 1, "", "evaluate_score_proba"], [12, 1, 1, "", "feature_importance"], [12, 1, 1, "", "fit"], [12, 1, 1, "", "fit_warm_start"], [12, 1, 1, "", "get_deepcopy"], [12, 1, 1, "", "get_params"], [12, 1, 1, "", "get_random_config"], [12, 1, 1, "", "get_random_configs"], [12, 1, 1, "", "load_model"], [12, 1, 1, "", "plot_tree"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_proba"], [12, 1, 1, "", "randomCVsearch"], [12, 1, 1, "", "replace_grid"], [12, 1, 1, "", "save_model"], [12, 1, 1, "", "set_params"], [12, 1, 1, "", "smac_search"], [12, 1, 1, "", "train"], [12, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.ExtraTreesClassifier.ETC": [[13, 1, 1, "", "cross_validation"], [13, 1, 1, "", "cross_validation_small_data"], [13, 1, 1, "", "evaluate"], [13, 1, 1, "", "evaluate_proba"], [13, 1, 1, "", "evaluate_score"], [13, 1, 1, "", "evaluate_score_proba"], [13, 1, 1, "", "feature_importance"], [13, 1, 1, "", "fit"], [13, 1, 1, "", "fit_warm_start"], [13, 1, 1, "", "get_deepcopy"], [13, 1, 1, "", "get_params"], [13, 1, 1, "", "get_random_config"], [13, 1, 1, "", "get_random_configs"], [13, 1, 1, "", "load_model"], [13, 1, 1, "", "predict"], [13, 1, 1, "", "predict_proba"], [13, 1, 1, "", "randomCVsearch"], [13, 1, 1, "", "replace_grid"], [13, 1, 1, "", "save_model"], [13, 1, 1, "", "set_params"], [13, 1, 1, "", "smac_search"], [13, 1, 1, "", "train"], [13, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.GaussianNB.GNB": [[14, 1, 1, "", "cross_validation"], [14, 1, 1, "", "cross_validation_small_data"], [14, 1, 1, "", "evaluate"], [14, 1, 1, "", "evaluate_proba"], [14, 1, 1, "", "evaluate_score"], [14, 1, 1, "", "evaluate_score_proba"], [14, 1, 1, "", "feature_importance"], [14, 1, 1, "", "fit"], [14, 1, 1, "", "fit_warm_start"], [14, 1, 1, "", "get_deepcopy"], [14, 1, 1, "", "get_params"], [14, 1, 1, "", "get_random_config"], [14, 1, 1, "", "get_random_configs"], [14, 1, 1, "", "load_model"], [14, 1, 1, "", "predict"], [14, 1, 1, "", "predict_proba"], [14, 1, 1, "", "randomCVsearch"], [14, 1, 1, "", "replace_grid"], [14, 1, 1, "", "save_model"], [14, 1, 1, "", "set_params"], [14, 1, 1, "", "smac_search"], [14, 1, 1, "", "train"], [14, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.GaussianProcessClassifier.GPC": [[15, 1, 1, "", "cross_validation"], [15, 1, 1, "", "cross_validation_small_data"], [15, 1, 1, "", "evaluate"], [15, 1, 1, "", "evaluate_proba"], [15, 1, 1, "", "evaluate_score"], [15, 1, 1, "", "evaluate_score_proba"], [15, 1, 1, "", "feature_importance"], [15, 1, 1, "", "fit"], [15, 1, 1, "", "fit_warm_start"], [15, 1, 1, "", "get_deepcopy"], [15, 1, 1, "", "get_params"], [15, 1, 1, "", "get_random_config"], [15, 1, 1, "", "get_random_configs"], [15, 1, 1, "", "load_model"], [15, 1, 1, "", "predict"], [15, 1, 1, "", "predict_proba"], [15, 1, 1, "", "randomCVsearch"], [15, 1, 1, "", "replace_grid"], [15, 1, 1, "", "save_model"], [15, 1, 1, "", "set_params"], [15, 1, 1, "", "smac_search"], [15, 1, 1, "", "train"], [15, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.GradientBoostingMachine.GBM": [[16, 1, 1, "", "cross_validation"], [16, 1, 1, "", "cross_validation_small_data"], [16, 1, 1, "", "evaluate"], [16, 1, 1, "", "evaluate_proba"], [16, 1, 1, "", "evaluate_score"], [16, 1, 1, "", "evaluate_score_proba"], [16, 1, 1, "", "feature_importance"], [16, 1, 1, "", "fit"], [16, 1, 1, "", "fit_warm_start"], [16, 1, 1, "", "get_deepcopy"], [16, 1, 1, "", "get_params"], [16, 1, 1, "", "get_random_config"], [16, 1, 1, "", "get_random_configs"], [16, 1, 1, "", "load_model"], [16, 1, 1, "", "predict"], [16, 1, 1, "", "predict_proba"], [16, 1, 1, "", "randomCVsearch"], [16, 1, 1, "", "replace_grid"], [16, 1, 1, "", "save_model"], [16, 1, 1, "", "set_params"], [16, 1, 1, "", "smac_search"], [16, 1, 1, "", "train"], [16, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.KNeighborsClassifier.KNC": [[17, 1, 1, "", "cross_validation"], [17, 1, 1, "", "cross_validation_small_data"], [17, 1, 1, "", "evaluate"], [17, 1, 1, "", "evaluate_proba"], [17, 1, 1, "", "evaluate_score"], [17, 1, 1, "", "evaluate_score_proba"], [17, 1, 1, "", "feature_importance"], [17, 1, 1, "", "fit"], [17, 1, 1, "", "fit_warm_start"], [17, 1, 1, "", "get_deepcopy"], [17, 1, 1, "", "get_params"], [17, 1, 1, "", "get_random_config"], [17, 1, 1, "", "get_random_configs"], [17, 1, 1, "", "load_model"], [17, 1, 1, "", "predict"], [17, 1, 1, "", "predict_proba"], [17, 1, 1, "", "randomCVsearch"], [17, 1, 1, "", "replace_grid"], [17, 1, 1, "", "save_model"], [17, 1, 1, "", "set_params"], [17, 1, 1, "", "smac_search"], [17, 1, 1, "", "train"], [17, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA": [[18, 1, 1, "", "cross_validation"], [18, 1, 1, "", "cross_validation_small_data"], [18, 1, 1, "", "evaluate"], [18, 1, 1, "", "evaluate_proba"], [18, 1, 1, "", "evaluate_score"], [18, 1, 1, "", "evaluate_score_proba"], [18, 1, 1, "", "feature_importance"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "fit_warm_start"], [18, 1, 1, "", "get_deepcopy"], [18, 1, 1, "", "get_params"], [18, 1, 1, "", "get_random_config"], [18, 1, 1, "", "get_random_configs"], [18, 1, 1, "", "load_model"], [18, 1, 1, "", "predict"], [18, 1, 1, "", "predict_proba"], [18, 1, 1, "", "randomCVsearch"], [18, 1, 1, "", "replace_grid"], [18, 1, 1, "", "save_model"], [18, 1, 1, "", "set_params"], [18, 1, 1, "", "smac_search"], [18, 1, 1, "", "train"], [18, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC": [[19, 1, 1, "", "cross_validation"], [19, 1, 1, "", "cross_validation_small_data"], [19, 1, 1, "", "evaluate"], [19, 1, 1, "", "evaluate_proba"], [19, 1, 1, "", "evaluate_score"], [19, 1, 1, "", "evaluate_score_proba"], [19, 1, 1, "", "feature_importance"], [19, 1, 1, "", "fit"], [19, 1, 1, "", "fit_warm_start"], [19, 1, 1, "", "get_deepcopy"], [19, 1, 1, "", "get_params"], [19, 1, 1, "", "get_random_config"], [19, 1, 1, "", "get_random_configs"], [19, 1, 1, "", "load_model"], [19, 1, 1, "", "predict"], [19, 1, 1, "", "predict_proba"], [19, 1, 1, "", "randomCVsearch"], [19, 1, 1, "", "replace_grid"], [19, 1, 1, "", "save_model"], [19, 1, 1, "", "set_params"], [19, 1, 1, "", "smac_search"], [19, 1, 1, "", "train"], [19, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.LogisticRegression.LR": [[20, 1, 1, "", "cross_validation"], [20, 1, 1, "", "cross_validation_small_data"], [20, 1, 1, "", "evaluate"], [20, 1, 1, "", "evaluate_proba"], [20, 1, 1, "", "evaluate_score"], [20, 1, 1, "", "evaluate_score_proba"], [20, 1, 1, "", "feature_importance"], [20, 1, 1, "", "fit"], [20, 1, 1, "", "fit_warm_start"], [20, 1, 1, "", "get_deepcopy"], [20, 1, 1, "", "get_params"], [20, 1, 1, "", "get_random_config"], [20, 1, 1, "", "get_random_configs"], [20, 1, 1, "", "load_model"], [20, 1, 1, "", "predict"], [20, 1, 1, "", "predict_proba"], [20, 1, 1, "", "randomCVsearch"], [20, 1, 1, "", "replace_grid"], [20, 1, 1, "", "save_model"], [20, 1, 1, "", "set_params"], [20, 1, 1, "", "smac_search"], [20, 1, 1, "", "train"], [20, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.MLPClassifier.MLPC": [[21, 1, 1, "", "cross_validation"], [21, 1, 1, "", "cross_validation_small_data"], [21, 1, 1, "", "evaluate"], [21, 1, 1, "", "evaluate_proba"], [21, 1, 1, "", "evaluate_score"], [21, 1, 1, "", "evaluate_score_proba"], [21, 1, 1, "", "feature_importance"], [21, 1, 1, "", "fit"], [21, 1, 1, "", "fit_warm_start"], [21, 1, 1, "", "get_deepcopy"], [21, 1, 1, "", "get_params"], [21, 1, 1, "", "get_random_config"], [21, 1, 1, "", "get_random_configs"], [21, 1, 1, "", "load_model"], [21, 1, 1, "", "predict"], [21, 1, 1, "", "predict_proba"], [21, 1, 1, "", "randomCVsearch"], [21, 1, 1, "", "replace_grid"], [21, 1, 1, "", "save_model"], [21, 1, 1, "", "set_params"], [21, 1, 1, "", "smac_search"], [21, 1, 1, "", "train"], [21, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA": [[22, 1, 1, "", "cross_validation"], [22, 1, 1, "", "cross_validation_small_data"], [22, 1, 1, "", "evaluate"], [22, 1, 1, "", "evaluate_proba"], [22, 1, 1, "", "evaluate_score"], [22, 1, 1, "", "evaluate_score_proba"], [22, 1, 1, "", "feature_importance"], [22, 1, 1, "", "fit"], [22, 1, 1, "", "fit_warm_start"], [22, 1, 1, "", "get_deepcopy"], [22, 1, 1, "", "get_params"], [22, 1, 1, "", "get_random_config"], [22, 1, 1, "", "get_random_configs"], [22, 1, 1, "", "load_model"], [22, 1, 1, "", "predict"], [22, 1, 1, "", "predict_proba"], [22, 1, 1, "", "randomCVsearch"], [22, 1, 1, "", "replace_grid"], [22, 1, 1, "", "save_model"], [22, 1, 1, "", "set_params"], [22, 1, 1, "", "smac_search"], [22, 1, 1, "", "train"], [22, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.RandomForestClassifier.RFC": [[23, 1, 1, "", "cross_validation"], [23, 1, 1, "", "cross_validation_small_data"], [23, 1, 1, "", "evaluate"], [23, 1, 1, "", "evaluate_proba"], [23, 1, 1, "", "evaluate_score"], [23, 1, 1, "", "evaluate_score_proba"], [23, 1, 1, "", "feature_importance"], [23, 1, 1, "", "fit"], [23, 1, 1, "", "fit_warm_start"], [23, 1, 1, "", "get_deepcopy"], [23, 1, 1, "", "get_params"], [23, 1, 1, "", "get_random_config"], [23, 1, 1, "", "get_random_configs"], [23, 1, 1, "", "load_model"], [23, 1, 1, "", "predict"], [23, 1, 1, "", "predict_proba"], [23, 1, 1, "", "randomCVsearch"], [23, 1, 1, "", "replace_grid"], [23, 1, 1, "", "save_model"], [23, 1, 1, "", "set_params"], [23, 1, 1, "", "smac_search"], [23, 1, 1, "", "train"], [23, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.SupportVectorClassifier.SVC": [[24, 1, 1, "", "cross_validation"], [24, 1, 1, "", "cross_validation_small_data"], [24, 1, 1, "", "evaluate"], [24, 1, 1, "", "evaluate_proba"], [24, 1, 1, "", "evaluate_score"], [24, 1, 1, "", "evaluate_score_proba"], [24, 1, 1, "", "feature_importance"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "fit_warm_start"], [24, 1, 1, "", "get_deepcopy"], [24, 1, 1, "", "get_params"], [24, 1, 1, "", "get_random_config"], [24, 1, 1, "", "get_random_configs"], [24, 1, 1, "", "load_model"], [24, 1, 1, "", "predict"], [24, 1, 1, "", "predict_proba"], [24, 1, 1, "", "randomCVsearch"], [24, 1, 1, "", "replace_grid"], [24, 1, 1, "", "save_model"], [24, 1, 1, "", "set_params"], [24, 1, 1, "", "smac_search"], [24, 1, 1, "", "train"], [24, 1, 1, "", "train_warm_start"]], "sam_ml.models.classifier.XGBoostClassifier.XGBC": [[25, 1, 1, "", "cross_validation"], [25, 1, 1, "", "cross_validation_small_data"], [25, 1, 1, "", "evaluate"], [25, 1, 1, "", "evaluate_proba"], [25, 1, 1, "", "evaluate_score"], [25, 1, 1, "", "evaluate_score_proba"], [25, 1, 1, "", "feature_importance"], [25, 1, 1, "", "fit"], [25, 1, 1, "", "fit_warm_start"], [25, 1, 1, "", "get_deepcopy"], [25, 1, 1, "", "get_params"], [25, 1, 1, "", "get_random_config"], [25, 1, 1, "", "get_random_configs"], [25, 1, 1, "", "load_model"], [25, 1, 1, "", "predict"], [25, 1, 1, "", "predict_proba"], [25, 1, 1, "", "randomCVsearch"], [25, 1, 1, "", "replace_grid"], [25, 1, 1, "", "save_model"], [25, 1, 1, "", "set_params"], [25, 1, 1, "", "smac_search"], [25, 1, 1, "", "train"], [25, 1, 1, "", "train_warm_start"]], "sam_ml.models": [[30, 3, 1, "", "create_pipeline"]], "sam_ml.models.main_auto_ml.AutoML": [[0, 1, 1, "", "_AutoML__finish_sound"], [0, 1, 1, "", "_AutoML__sort_dict"], [0, 1, 1, "", "add_model"], [0, 1, 1, "", "eval_models"], [0, 1, 1, "", "eval_models_cv"], [0, 1, 1, "", "find_best_model_mass_search"], [0, 1, 1, "", "find_best_model_randomCV"], [0, 1, 1, "", "find_best_model_smac"], [0, 1, 1, "", "model_combs"], [0, 1, 1, "", "output_scores_as_pd"], [0, 1, 1, "", "remove_model"]], "sam_ml.models.main_classifier.Classifier": [[2, 1, 1, "", "_changed_parameters"], [2, 1, 1, "", "_create_prediction_proba"], [2, 1, 1, "", "_get_all_scores"], [2, 1, 1, "", "_get_score"], [2, 1, 1, "", "_make_cv_scores"], [2, 1, 1, "", "_make_scorer"], [2, 1, 1, "", "_print_scores"], [2, 1, 1, "", "cross_validation"], [2, 1, 1, "", "cross_validation_small_data"], [2, 1, 1, "", "evaluate"], [2, 1, 1, "", "evaluate_proba"], [2, 1, 1, "", "evaluate_score"], [2, 1, 1, "", "evaluate_score_proba"], [2, 1, 1, "", "feature_importance"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "fit_warm_start"], [2, 1, 1, "", "get_deepcopy"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "get_random_config"], [2, 1, 1, "", "get_random_configs"], [2, 1, 1, "", "load_model"], [2, 1, 1, "", "predict"], [2, 1, 1, "", "predict_proba"], [2, 1, 1, "", "randomCVsearch"], [2, 1, 1, "", "replace_grid"], [2, 1, 1, "", "save_model"], [2, 1, 1, "", "set_params"], [2, 1, 1, "", "smac_search"], [2, 1, 1, "", "train"], [2, 1, 1, "", "train_warm_start"]], "sam_ml.models.main_model.Model": [[4, 1, 1, "", "_changed_parameters"], [4, 1, 1, "", "_get_all_scores"], [4, 1, 1, "", "_get_score"], [4, 1, 1, "", "_make_cv_scores"], [4, 1, 1, "", "_make_scorer"], [4, 1, 1, "", "_print_scores"], [4, 1, 1, "", "cross_validation"], [4, 1, 1, "", "cross_validation_small_data"], [4, 1, 1, "", "evaluate"], [4, 1, 1, "", "evaluate_score"], [4, 1, 1, "", "feature_importance"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "fit_warm_start"], [4, 1, 1, "", "get_deepcopy"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "get_random_config"], [4, 1, 1, "", "get_random_configs"], [4, 1, 1, "", "load_model"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "predict_proba"], [4, 1, 1, "", "randomCVsearch"], [4, 1, 1, "", "replace_grid"], [4, 1, 1, "", "save_model"], [4, 1, 1, "", "set_params"], [4, 1, 1, "", "smac_search"], [4, 1, 1, "", "train"], [4, 1, 1, "", "train_warm_start"]], "sam_ml.models.main_pipeline.BasePipeline": [[1, 1, 1, "", "_auto_vectorizing"], [1, 1, 1, "", "_changed_parameters"], [1, 1, 1, "", "_data_prepare"], [1, 1, 1, "", "_get_all_scores"], [1, 1, 1, "", "_get_score"], [1, 1, 1, "", "_inherit_from_model"], [1, 1, 1, "", "_make_cv_scores"], [1, 1, 1, "", "_make_scorer"], [1, 1, 1, "", "_print_scores"], [1, 1, 1, "", "_validate_component"], [1, 1, 1, "", "cross_validation"], [1, 1, 1, "", "cross_validation_small_data"], [1, 1, 1, "", "evaluate"], [1, 1, 1, "", "evaluate_score"], [1, 1, 1, "", "feature_importance"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "fit_warm_start"], [1, 1, 1, "", "get_deepcopy"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "get_random_config"], [1, 1, 1, "", "get_random_configs"], [1, 1, 1, "", "load_model"], [1, 1, 1, "", "predict"], [1, 1, 1, "", "predict_proba"], [1, 1, 1, "", "randomCVsearch"], [1, 1, 1, "", "replace_grid"], [1, 1, 1, "", "save_model"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "smac_search"], [1, 1, 1, "", "train"], [1, 1, 1, "", "train_warm_start"]], "sam_ml.models.main_regressor.Regressor": [[5, 1, 1, "", "_changed_parameters"], [5, 1, 1, "", "_get_all_scores"], [5, 1, 1, "", "_get_score"], [5, 1, 1, "", "_make_cv_scores"], [5, 1, 1, "", "_make_scorer"], [5, 1, 1, "", "_print_scores"], [5, 1, 1, "", "cross_validation"], [5, 1, 1, "", "cross_validation_small_data"], [5, 1, 1, "", "evaluate"], [5, 1, 1, "", "evaluate_score"], [5, 1, 1, "", "feature_importance"], [5, 1, 1, "", "fit"], [5, 1, 1, "", "fit_warm_start"], [5, 1, 1, "", "get_deepcopy"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "get_random_config"], [5, 1, 1, "", "get_random_configs"], [5, 1, 1, "", "load_model"], [5, 1, 1, "", "predict"], [5, 1, 1, "", "predict_proba"], [5, 1, 1, "", "randomCVsearch"], [5, 1, 1, "", "replace_grid"], [5, 1, 1, "", "save_model"], [5, 1, 1, "", "set_params"], [5, 1, 1, "", "smac_search"], [5, 1, 1, "", "train"], [5, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.BayesianRidge.BYR": [[38, 1, 1, "", "cross_validation"], [38, 1, 1, "", "cross_validation_small_data"], [38, 1, 1, "", "evaluate"], [38, 1, 1, "", "evaluate_score"], [38, 1, 1, "", "feature_importance"], [38, 1, 1, "", "fit"], [38, 1, 1, "", "fit_warm_start"], [38, 1, 1, "", "get_deepcopy"], [38, 1, 1, "", "get_params"], [38, 1, 1, "", "get_random_config"], [38, 1, 1, "", "get_random_configs"], [38, 1, 1, "", "load_model"], [38, 1, 1, "", "predict"], [38, 1, 1, "", "predict_proba"], [38, 1, 1, "", "randomCVsearch"], [38, 1, 1, "", "replace_grid"], [38, 1, 1, "", "save_model"], [38, 1, 1, "", "set_params"], [38, 1, 1, "", "smac_search"], [38, 1, 1, "", "train"], [38, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.DecisionTreeRegressor.DTR": [[39, 1, 1, "", "cross_validation"], [39, 1, 1, "", "cross_validation_small_data"], [39, 1, 1, "", "evaluate"], [39, 1, 1, "", "evaluate_score"], [39, 1, 1, "", "feature_importance"], [39, 1, 1, "", "fit"], [39, 1, 1, "", "fit_warm_start"], [39, 1, 1, "", "get_deepcopy"], [39, 1, 1, "", "get_params"], [39, 1, 1, "", "get_random_config"], [39, 1, 1, "", "get_random_configs"], [39, 1, 1, "", "load_model"], [39, 1, 1, "", "plot_tree"], [39, 1, 1, "", "predict"], [39, 1, 1, "", "predict_proba"], [39, 1, 1, "", "randomCVsearch"], [39, 1, 1, "", "replace_grid"], [39, 1, 1, "", "save_model"], [39, 1, 1, "", "set_params"], [39, 1, 1, "", "smac_search"], [39, 1, 1, "", "train"], [39, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.ElasticNet.EN": [[40, 1, 1, "", "cross_validation"], [40, 1, 1, "", "cross_validation_small_data"], [40, 1, 1, "", "evaluate"], [40, 1, 1, "", "evaluate_score"], [40, 1, 1, "", "feature_importance"], [40, 1, 1, "", "fit"], [40, 1, 1, "", "fit_warm_start"], [40, 1, 1, "", "get_deepcopy"], [40, 1, 1, "", "get_params"], [40, 1, 1, "", "get_random_config"], [40, 1, 1, "", "get_random_configs"], [40, 1, 1, "", "load_model"], [40, 1, 1, "", "predict"], [40, 1, 1, "", "predict_proba"], [40, 1, 1, "", "randomCVsearch"], [40, 1, 1, "", "replace_grid"], [40, 1, 1, "", "save_model"], [40, 1, 1, "", "set_params"], [40, 1, 1, "", "smac_search"], [40, 1, 1, "", "train"], [40, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.ExtraTreesRegressor.ETR": [[41, 1, 1, "", "cross_validation"], [41, 1, 1, "", "cross_validation_small_data"], [41, 1, 1, "", "evaluate"], [41, 1, 1, "", "evaluate_score"], [41, 1, 1, "", "feature_importance"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_warm_start"], [41, 1, 1, "", "get_deepcopy"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "get_random_config"], [41, 1, 1, "", "get_random_configs"], [41, 1, 1, "", "load_model"], [41, 1, 1, "", "predict"], [41, 1, 1, "", "predict_proba"], [41, 1, 1, "", "randomCVsearch"], [41, 1, 1, "", "replace_grid"], [41, 1, 1, "", "save_model"], [41, 1, 1, "", "set_params"], [41, 1, 1, "", "smac_search"], [41, 1, 1, "", "train"], [41, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.LassoLarsCV.LLCV": [[42, 1, 1, "", "cross_validation"], [42, 1, 1, "", "cross_validation_small_data"], [42, 1, 1, "", "evaluate"], [42, 1, 1, "", "evaluate_score"], [42, 1, 1, "", "feature_importance"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_warm_start"], [42, 1, 1, "", "get_deepcopy"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "get_random_config"], [42, 1, 1, "", "get_random_configs"], [42, 1, 1, "", "load_model"], [42, 1, 1, "", "predict"], [42, 1, 1, "", "predict_proba"], [42, 1, 1, "", "randomCVsearch"], [42, 1, 1, "", "replace_grid"], [42, 1, 1, "", "save_model"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "smac_search"], [42, 1, 1, "", "train"], [42, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.RandomForestRegressor.RFR": [[43, 1, 1, "", "cross_validation"], [43, 1, 1, "", "cross_validation_small_data"], [43, 1, 1, "", "evaluate"], [43, 1, 1, "", "evaluate_score"], [43, 1, 1, "", "feature_importance"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_warm_start"], [43, 1, 1, "", "get_deepcopy"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "get_random_config"], [43, 1, 1, "", "get_random_configs"], [43, 1, 1, "", "load_model"], [43, 1, 1, "", "predict"], [43, 1, 1, "", "predict_proba"], [43, 1, 1, "", "randomCVsearch"], [43, 1, 1, "", "replace_grid"], [43, 1, 1, "", "save_model"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "smac_search"], [43, 1, 1, "", "train"], [43, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.SGDRegressor.SGDR": [[44, 1, 1, "", "cross_validation"], [44, 1, 1, "", "cross_validation_small_data"], [44, 1, 1, "", "evaluate"], [44, 1, 1, "", "evaluate_score"], [44, 1, 1, "", "feature_importance"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_warm_start"], [44, 1, 1, "", "get_deepcopy"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "get_random_config"], [44, 1, 1, "", "get_random_configs"], [44, 1, 1, "", "load_model"], [44, 1, 1, "", "predict"], [44, 1, 1, "", "predict_proba"], [44, 1, 1, "", "randomCVsearch"], [44, 1, 1, "", "replace_grid"], [44, 1, 1, "", "save_model"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "smac_search"], [44, 1, 1, "", "train"], [44, 1, 1, "", "train_warm_start"]], "sam_ml.models.regressor.XGBoostRegressor.XGBR": [[45, 1, 1, "", "cross_validation"], [45, 1, 1, "", "cross_validation_small_data"], [45, 1, 1, "", "evaluate"], [45, 1, 1, "", "evaluate_score"], [45, 1, 1, "", "feature_importance"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_warm_start"], [45, 1, 1, "", "get_deepcopy"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "get_random_config"], [45, 1, 1, "", "get_random_configs"], [45, 1, 1, "", "load_model"], [45, 1, 1, "", "predict"], [45, 1, 1, "", "predict_proba"], [45, 1, 1, "", "randomCVsearch"], [45, 1, 1, "", "replace_grid"], [45, 1, 1, "", "save_model"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "smac_search"], [45, 1, 1, "", "train"], [45, 1, 1, "", "train_warm_start"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"]}, "titleterms": {"automl": 0, "class": [0, 1, 2, 3, 4, 5], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "return": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "note": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45], "basepipelin": 1, "exampl": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45], "classifi": [2, 21, 26], "data": 3, "model": 4, "regressor": [5, 46], "ctest": 6, "rtest": 7, "auto": 8, "ml": [8, 28], "adaboostclassifi": 9, "abc": 9, "baggingclassifi": 10, "bc": 10, "bernoullinb": 11, "bnb": 11, "decisiontreeclassifi": 12, "dtc": 12, "extratreesclassifi": 13, "etc": 13, "gaussiannb": 14, "gnb": 14, "gaussianprocessclassifi": 15, "gpc": 15, "gradientboostingmachin": 16, "gbm": 16, "kneighborsclassifi": 17, "knc": 17, "lineardiscriminantanalysi": 18, "lda": 18, "linearsupportvectorclassifi": 19, "lsvc": 19, "logisticregress": 20, "lr": 20, "mlp": 21, "mlpc": 21, "quadraticdiscriminantanalysi": 22, "qda": 22, "randomforestclassifi": 23, "rfc": 23, "supportvectorclassifi": 24, "svc": 24, "xgbclassifi": 25, "xgbc": 25, "global": 27, "variabl": 27, "log": 27, "n_job": 27, "sound": 27, "On": 27, "score": [27, 47], "welcom": 28, "sam": 28, "py": 28, "": 28, "document": 28, "instal": [28, 48], "smac": 28, "without": 28, "let": 28, "get": 28, "start": 28, "packag": 29, "graph": 29, "pipelin": 30, "factori": 30, "embeddings_build": 31, "sampler": 32, "samplerpipelin": 33, "scaler": 34, "selector": 35, "preprocess": 36, "regio": 37, "bayesianridg": 38, "byr": 38, "decisiontreeregressor": 39, "dtr": 39, "elasticnet": 40, "en": 40, "extratreesregressor": 41, "etr": 41, "lassolarscv": 42, "llcv": 42, "randomforestregressor": 43, "rfr": 43, "sgdregressor": 44, "sgdr": 44, "xgbregressor": 45, "xgbr": 45, "classif": 47, "advanc": 47, "s_score": 47, "l_score": 47, "swig": 48, "linux": 48, "maco": 48, "window": 48}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"AutoML class": [[0, "automl-class"]], "Parameters": [[0, "parameters"], [0, "id1"], [0, "id2"], [0, "id4"], [0, "id7"], [0, "id9"], [0, "id12"], [0, "id14"], [0, "id16"], [0, "id18"], [1, "parameters"], [1, "id2"], [1, "id4"], [1, "id6"], [1, "id8"], [1, "id9"], [1, "id11"], [1, "id13"], [1, "id15"], [1, "id17"], [1, "id19"], [1, "id21"], [1, "id23"], [1, "id26"], [1, "id28"], [1, "id31"], [1, "id35"], [1, "id38"], [1, "id40"], [1, "id42"], [1, "id44"], [1, "id47"], [1, "id50"], [1, "id51"], [1, "id53"], [1, "id55"], [1, "id57"], [2, "parameters"], [2, "id2"], [2, "id4"], [2, "id6"], [2, "id8"], [2, "id10"], [2, "id12"], [2, "id14"], [2, "id17"], [2, "id20"], [2, "id23"], [2, "id26"], [2, "id31"], [2, "id33"], [2, "id36"], [2, "id40"], [2, "id43"], [2, "id45"], [2, "id47"], [2, "id49"], [2, "id53"], [2, "id56"], [2, "id57"], [2, "id59"], [2, "id62"], [2, "id65"], [3, "parameters"], [3, "id3"], [4, "parameters"], [4, "id2"], [4, "id4"], [4, "id6"], [4, "id8"], [4, "id10"], [4, "id12"], [4, "id14"], [4, "id16"], [4, "id19"], [4, "id21"], [4, "id24"], [4, "id28"], [4, "id31"], [4, "id33"], [4, "id35"], [4, "id37"], [4, "id40"], [4, "id43"], [4, "id44"], [4, "id46"], [4, "id48"], [4, "id50"], [5, "parameters"], [5, "id2"], [5, "id4"], [5, "id6"], [5, "id8"], [5, "id10"], [5, "id12"], [5, "id15"], [5, "id18"], [5, "id23"], [5, "id25"], [5, "id28"], [5, "id32"], [5, "id36"], [5, "id38"], [5, "id40"], [5, "id42"], [5, "id46"], [5, "id49"], [5, "id50"], [5, "id52"], [5, "id55"], [5, "id58"], [6, "parameters"], [6, "id1"], [6, "id2"], [6, "id6"], [6, "id9"], [6, "id13"], [6, "id16"], [6, "id18"], [6, "id20"], [7, "parameters"], [7, "id1"], [7, "id2"], [7, "id6"], [7, "id9"], [7, "id13"], [7, "id16"], [7, "id18"], [7, "id20"], [9, "parameters"], [9, "id1"], [9, "id4"], [9, "id7"], [9, "id10"], [9, "id13"], [9, "id18"], [9, "id20"], [9, "id23"], [9, "id27"], [9, "id30"], [9, "id32"], [9, "id34"], [9, "id36"], [9, "id40"], [9, "id43"], [9, "id44"], [9, "id46"], [9, "id49"], [9, "id52"], [10, "parameters"], [10, "id1"], [10, "id4"], [10, "id7"], [10, "id10"], [10, "id13"], [10, "id18"], [10, "id20"], [10, "id23"], [10, "id27"], [10, "id30"], [10, "id32"], [10, "id34"], [10, "id36"], [10, "id40"], [10, "id43"], [10, "id44"], [10, "id46"], [10, "id49"], [10, "id52"], [11, "parameters"], [11, "id1"], [11, "id4"], [11, "id7"], [11, "id10"], [11, "id13"], [11, "id18"], [11, "id20"], [11, "id23"], [11, "id27"], [11, "id30"], [11, "id32"], [11, "id34"], [11, "id36"], [11, "id40"], [11, "id43"], [11, "id44"], [11, "id46"], [11, "id49"], [11, "id52"], [12, "parameters"], [12, "id1"], [12, "id4"], [12, "id7"], [12, "id10"], [12, "id13"], [12, "id18"], [12, "id20"], [12, "id23"], [12, "id27"], [12, "id30"], [12, "id33"], [12, "id35"], [12, "id37"], [12, "id41"], [12, "id44"], [12, "id45"], [12, "id47"], [12, "id50"], [12, "id53"], [13, "parameters"], [13, "id1"], [13, "id4"], [13, "id7"], [13, "id10"], [13, "id13"], [13, "id18"], [13, "id20"], [13, "id23"], [13, "id27"], [13, "id30"], [13, "id32"], [13, "id34"], [13, "id36"], [13, "id40"], [13, "id43"], [13, "id44"], [13, "id46"], [13, "id49"], [13, "id52"], [14, "parameters"], [14, "id1"], [14, "id4"], [14, "id7"], [14, "id10"], [14, "id13"], [14, "id18"], [14, "id20"], [14, "id23"], [14, "id27"], [14, "id30"], [14, "id32"], [14, "id34"], [14, "id36"], [14, "id40"], [14, "id43"], [14, "id44"], [14, "id46"], [14, "id49"], [14, "id52"], [15, "parameters"], [15, "id1"], [15, "id4"], [15, "id7"], [15, "id10"], [15, "id13"], [15, "id18"], [15, "id20"], [15, "id23"], [15, "id27"], [15, "id30"], [15, "id32"], [15, "id34"], [15, "id36"], [15, "id40"], [15, "id43"], [15, "id44"], [15, "id46"], [15, "id49"], [15, "id52"], [16, "parameters"], [16, "id1"], [16, "id4"], [16, "id7"], [16, "id10"], [16, "id13"], [16, "id18"], [16, "id20"], [16, "id23"], [16, "id27"], [16, "id30"], [16, "id32"], [16, "id34"], [16, "id36"], [16, "id40"], [16, "id43"], [16, "id44"], [16, "id46"], [16, "id49"], [16, "id52"], [17, "parameters"], [17, "id1"], [17, "id4"], [17, "id7"], [17, "id10"], [17, "id13"], [17, "id18"], [17, "id20"], [17, "id23"], [17, "id27"], [17, "id30"], [17, "id32"], [17, "id34"], [17, "id36"], [17, "id40"], [17, "id43"], [17, "id44"], [17, "id46"], [17, "id49"], [17, "id52"], [18, "parameters"], [18, "id1"], [18, "id4"], [18, "id7"], [18, "id10"], [18, "id13"], [18, "id18"], [18, "id20"], [18, "id23"], [18, "id27"], [18, "id30"], [18, "id32"], [18, "id34"], [18, "id36"], [18, "id40"], [18, "id43"], [18, "id44"], [18, "id46"], [18, "id49"], [18, "id52"], [19, "parameters"], [19, "id1"], [19, "id4"], [19, "id7"], [19, "id10"], [19, "id13"], [19, "id18"], [19, "id20"], [19, "id23"], [19, "id27"], [19, "id30"], [19, "id32"], [19, "id34"], [19, "id36"], [19, "id40"], [19, "id43"], [19, "id44"], [19, "id46"], [19, "id49"], [19, "id52"], [20, "parameters"], [20, "id1"], [20, "id4"], [20, "id7"], [20, "id10"], [20, "id13"], [20, "id18"], [20, "id20"], [20, "id23"], [20, "id27"], [20, "id30"], [20, "id32"], [20, "id34"], [20, "id36"], [20, "id40"], [20, "id43"], [20, "id44"], [20, "id46"], [20, "id49"], [20, "id52"], [21, "parameters"], [21, "id1"], [21, "id4"], [21, "id7"], [21, "id10"], [21, "id13"], [21, "id18"], [21, "id20"], [21, "id23"], [21, "id27"], [21, "id30"], [21, "id32"], [21, "id34"], [21, "id36"], [21, "id40"], [21, "id43"], [21, "id44"], [21, "id46"], [21, "id49"], [21, "id52"], [22, "parameters"], [22, "id1"], [22, "id4"], [22, "id7"], [22, "id10"], [22, "id13"], [22, "id18"], [22, "id20"], [22, "id23"], [22, "id27"], [22, "id30"], [22, "id32"], [22, "id34"], [22, "id36"], [22, "id40"], [22, "id43"], [22, "id44"], [22, "id46"], [22, "id49"], [22, "id52"], [23, "parameters"], [23, "id1"], [23, "id4"], [23, "id7"], [23, "id10"], [23, "id13"], [23, "id18"], [23, "id20"], [23, "id23"], [23, "id27"], [23, "id30"], [23, "id32"], [23, "id34"], [23, "id36"], [23, "id40"], [23, "id43"], [23, "id44"], [23, "id46"], [23, "id49"], [23, "id52"], [24, "parameters"], [24, "id1"], [24, "id4"], [24, "id7"], [24, "id10"], [24, "id13"], [24, "id18"], [24, "id20"], [24, "id23"], [24, "id27"], [24, "id30"], [24, "id32"], [24, "id34"], [24, "id36"], [24, "id40"], [24, "id43"], [24, "id44"], [24, "id46"], [24, "id49"], [24, "id52"], [25, "parameters"], [25, "id1"], [25, "id4"], [25, "id7"], [25, "id10"], [25, "id13"], [25, "id18"], [25, "id20"], [25, "id23"], [25, "id27"], [25, "id30"], [25, "id32"], [25, "id34"], [25, "id36"], [25, "id40"], [25, "id43"], [25, "id44"], [25, "id46"], [25, "id49"], [25, "id52"], [30, "parameters"], [31, "parameters"], [31, "id1"], [31, "id4"], [31, "id6"], [32, "parameters"], [32, "id2"], [32, "id5"], [33, "parameters"], [33, "id2"], [33, "id5"], [34, "parameters"], [34, "id2"], [34, "id5"], [35, "parameters"], [35, "id2"], [35, "id5"], [37, "parameters"], [38, "parameters"], [38, "id1"], [38, "id4"], [38, "id7"], [38, "id12"], [38, "id14"], [38, "id17"], [38, "id21"], [38, "id24"], [38, "id26"], [38, "id28"], [38, "id30"], [38, "id34"], [38, "id37"], [38, "id38"], [38, "id40"], [38, "id43"], [38, "id46"], [39, "parameters"], [39, "id1"], [39, "id4"], [39, "id7"], [39, "id12"], [39, "id14"], [39, "id17"], [39, "id21"], [39, "id24"], [39, "id27"], [39, "id29"], [39, "id31"], [39, "id35"], [39, "id38"], [39, "id39"], [39, "id41"], [39, "id44"], [39, "id47"], [40, "parameters"], [40, "id1"], [40, "id4"], [40, "id7"], [40, "id12"], [40, "id14"], [40, "id17"], [40, "id21"], [40, "id24"], [40, "id26"], [40, "id28"], [40, "id30"], [40, "id34"], [40, "id37"], [40, "id38"], [40, "id40"], [40, "id43"], [40, "id46"], [41, "parameters"], [41, "id1"], [41, "id4"], [41, "id7"], [41, "id12"], [41, "id14"], [41, "id17"], [41, "id21"], [41, "id24"], [41, "id26"], [41, "id28"], [41, "id30"], [41, "id34"], [41, "id37"], [41, "id38"], [41, "id40"], [41, "id43"], [41, "id46"], [42, "parameters"], [42, "id1"], [42, "id4"], [42, "id7"], [42, "id12"], [42, "id14"], [42, "id17"], [42, "id21"], [42, "id24"], [42, "id26"], [42, "id28"], [42, "id30"], [42, "id34"], [42, "id37"], [42, "id38"], [42, "id40"], [42, "id43"], [42, "id46"], [43, "parameters"], [43, "id1"], [43, "id4"], [43, "id7"], [43, "id12"], [43, "id14"], [43, "id17"], [43, "id21"], [43, "id24"], [43, "id26"], [43, "id28"], [43, "id30"], [43, "id34"], [43, "id37"], [43, "id38"], [43, "id40"], [43, "id43"], [43, "id46"], [44, "parameters"], [44, "id1"], [44, "id4"], [44, "id7"], [44, "id12"], [44, "id14"], [44, "id17"], [44, "id21"], [44, "id24"], [44, "id26"], [44, "id28"], [44, "id30"], [44, "id34"], [44, "id37"], [44, "id38"], [44, "id40"], [44, "id43"], [44, "id46"], [45, "parameters"], [45, "id1"], [45, "id4"], [45, "id7"], [45, "id12"], [45, "id14"], [45, "id17"], [45, "id21"], [45, "id24"], [45, "id26"], [45, "id28"], [45, "id30"], [45, "id34"], [45, "id37"], [45, "id38"], [45, "id40"], [45, "id43"], [45, "id46"]], "Returns": [[0, "returns"], [0, "id3"], [0, "id5"], [0, "id8"], [0, "id10"], [0, "id13"], [0, "id15"], [0, "id17"], [1, "returns"], [1, "id1"], [1, "id3"], [1, "id5"], [1, "id7"], [1, "id10"], [1, "id12"], [1, "id14"], [1, "id16"], [1, "id18"], [1, "id20"], [1, "id22"], [1, "id24"], [1, "id25"], [1, "id27"], [1, "id29"], [1, "id30"], [1, "id32"], [1, "id33"], [1, "id36"], [1, "id39"], [1, "id41"], [1, "id43"], [1, "id45"], [1, "id48"], [1, "id52"], [1, "id54"], [1, "id56"], [1, "id58"], [2, "returns"], [2, "id1"], [2, "id3"], [2, "id5"], [2, "id7"], [2, "id9"], [2, "id11"], [2, "id13"], [2, "id15"], [2, "id18"], [2, "id21"], [2, "id24"], [2, "id27"], [2, "id29"], [2, "id32"], [2, "id34"], [2, "id35"], [2, "id37"], [2, "id38"], [2, "id41"], [2, "id44"], [2, "id46"], [2, "id48"], [2, "id50"], [2, "id54"], [2, "id58"], [2, "id60"], [2, "id63"], [2, "id66"], [3, "returns"], [3, "id1"], [3, "id2"], [3, "id4"], [4, "returns"], [4, "id1"], [4, "id3"], [4, "id5"], [4, "id7"], [4, "id9"], [4, "id11"], [4, "id13"], [4, "id15"], [4, "id17"], [4, "id18"], [4, "id20"], [4, "id22"], [4, "id23"], [4, "id25"], [4, "id26"], [4, "id29"], [4, "id32"], [4, "id34"], [4, "id36"], [4, "id38"], [4, "id41"], [4, "id45"], [4, "id47"], [4, "id49"], [4, "id51"], [5, "returns"], [5, "id1"], [5, "id3"], [5, "id5"], [5, "id7"], [5, "id9"], [5, "id11"], [5, "id13"], [5, "id16"], [5, "id19"], [5, "id21"], [5, "id24"], [5, "id26"], [5, "id27"], [5, "id29"], [5, "id30"], [5, "id33"], [5, "id37"], [5, "id39"], [5, "id41"], [5, "id43"], [5, "id47"], [5, "id51"], [5, "id53"], [5, "id56"], [5, "id59"], [6, "returns"], [6, "id3"], [6, "id7"], [6, "id10"], [6, "id14"], [6, "id17"], [6, "id19"], [7, "returns"], [7, "id3"], [7, "id7"], [7, "id10"], [7, "id14"], [7, "id17"], [7, "id19"], [9, "returns"], [9, "id2"], [9, "id5"], [9, "id8"], [9, "id11"], [9, "id14"], [9, "id16"], [9, "id19"], [9, "id21"], [9, "id22"], [9, "id24"], [9, "id25"], [9, "id28"], [9, "id31"], [9, "id33"], [9, "id35"], [9, "id37"], [9, "id41"], [9, "id45"], [9, "id47"], [9, "id50"], [9, "id53"], [10, "returns"], [10, "id2"], [10, "id5"], [10, "id8"], [10, "id11"], [10, "id14"], [10, "id16"], [10, "id19"], [10, "id21"], [10, "id22"], [10, "id24"], [10, "id25"], [10, "id28"], [10, "id31"], [10, "id33"], [10, "id35"], [10, "id37"], [10, "id41"], [10, "id45"], [10, "id47"], [10, "id50"], [10, "id53"], [11, "returns"], [11, "id2"], [11, "id5"], [11, "id8"], [11, "id11"], [11, "id14"], [11, "id16"], [11, "id19"], [11, "id21"], [11, "id22"], [11, "id24"], [11, "id25"], [11, "id28"], [11, "id31"], [11, "id33"], [11, "id35"], [11, "id37"], [11, "id41"], [11, "id45"], [11, "id47"], [11, "id50"], [11, "id53"], [12, "returns"], [12, "id2"], [12, "id5"], [12, "id8"], [12, "id11"], [12, "id14"], [12, "id16"], [12, "id19"], [12, "id21"], [12, "id22"], [12, "id24"], [12, "id25"], [12, "id28"], [12, "id31"], [12, "id32"], [12, "id34"], [12, "id36"], [12, "id38"], [12, "id42"], [12, "id46"], [12, "id48"], [12, "id51"], [12, "id54"], [13, "returns"], [13, "id2"], [13, "id5"], [13, "id8"], [13, "id11"], [13, "id14"], [13, "id16"], [13, "id19"], [13, "id21"], [13, "id22"], [13, "id24"], [13, "id25"], [13, "id28"], [13, "id31"], [13, "id33"], [13, "id35"], [13, "id37"], [13, "id41"], [13, "id45"], [13, "id47"], [13, "id50"], [13, "id53"], [14, "returns"], [14, "id2"], [14, "id5"], [14, "id8"], [14, "id11"], [14, "id14"], [14, "id16"], [14, "id19"], [14, "id21"], [14, "id22"], [14, "id24"], [14, "id25"], [14, "id28"], [14, "id31"], [14, "id33"], [14, "id35"], [14, "id37"], [14, "id41"], [14, "id45"], [14, "id47"], [14, "id50"], [14, "id53"], [15, "returns"], [15, "id2"], [15, "id5"], [15, "id8"], [15, "id11"], [15, "id14"], [15, "id16"], [15, "id19"], [15, "id21"], [15, "id22"], [15, "id24"], [15, "id25"], [15, "id28"], [15, "id31"], [15, "id33"], [15, "id35"], [15, "id37"], [15, "id41"], [15, "id45"], [15, "id47"], [15, "id50"], [15, "id53"], [16, "returns"], [16, "id2"], [16, "id5"], [16, "id8"], [16, "id11"], [16, "id14"], [16, "id16"], [16, "id19"], [16, "id21"], [16, "id22"], [16, "id24"], [16, "id25"], [16, "id28"], [16, "id31"], [16, "id33"], [16, "id35"], [16, "id37"], [16, "id41"], [16, "id45"], [16, "id47"], [16, "id50"], [16, "id53"], [17, "returns"], [17, "id2"], [17, "id5"], [17, "id8"], [17, "id11"], [17, "id14"], [17, "id16"], [17, "id19"], [17, "id21"], [17, "id22"], [17, "id24"], [17, "id25"], [17, "id28"], [17, "id31"], [17, "id33"], [17, "id35"], [17, "id37"], [17, "id41"], [17, "id45"], [17, "id47"], [17, "id50"], [17, "id53"], [18, "returns"], [18, "id2"], [18, "id5"], [18, "id8"], [18, "id11"], [18, "id14"], [18, "id16"], [18, "id19"], [18, "id21"], [18, "id22"], [18, "id24"], [18, "id25"], [18, "id28"], [18, "id31"], [18, "id33"], [18, "id35"], [18, "id37"], [18, "id41"], [18, "id45"], [18, "id47"], [18, "id50"], [18, "id53"], [19, "returns"], [19, "id2"], [19, "id5"], [19, "id8"], [19, "id11"], [19, "id14"], [19, "id16"], [19, "id19"], [19, "id21"], [19, "id22"], [19, "id24"], [19, "id25"], [19, "id28"], [19, "id31"], [19, "id33"], [19, "id35"], [19, "id37"], [19, "id41"], [19, "id45"], [19, "id47"], [19, "id50"], [19, "id53"], [20, "returns"], [20, "id2"], [20, "id5"], [20, "id8"], [20, "id11"], [20, "id14"], [20, "id16"], [20, "id19"], [20, "id21"], [20, "id22"], [20, "id24"], [20, "id25"], [20, "id28"], [20, "id31"], [20, "id33"], [20, "id35"], [20, "id37"], [20, "id41"], [20, "id45"], [20, "id47"], [20, "id50"], [20, "id53"], [21, "returns"], [21, "id2"], [21, "id5"], [21, "id8"], [21, "id11"], [21, "id14"], [21, "id16"], [21, "id19"], [21, "id21"], [21, "id22"], [21, "id24"], [21, "id25"], [21, "id28"], [21, "id31"], [21, "id33"], [21, "id35"], [21, "id37"], [21, "id41"], [21, "id45"], [21, "id47"], [21, "id50"], [21, "id53"], [22, "returns"], [22, "id2"], [22, "id5"], [22, "id8"], [22, "id11"], [22, "id14"], [22, "id16"], [22, "id19"], [22, "id21"], [22, "id22"], [22, "id24"], [22, "id25"], [22, "id28"], [22, "id31"], [22, "id33"], [22, "id35"], [22, "id37"], [22, "id41"], [22, "id45"], [22, "id47"], [22, "id50"], [22, "id53"], [23, "returns"], [23, "id2"], [23, "id5"], [23, "id8"], [23, "id11"], [23, "id14"], [23, "id16"], [23, "id19"], [23, "id21"], [23, "id22"], [23, "id24"], [23, "id25"], [23, "id28"], [23, "id31"], [23, "id33"], [23, "id35"], [23, "id37"], [23, "id41"], [23, "id45"], [23, "id47"], [23, "id50"], [23, "id53"], [24, "returns"], [24, "id2"], [24, "id5"], [24, "id8"], [24, "id11"], [24, "id14"], [24, "id16"], [24, "id19"], [24, "id21"], [24, "id22"], [24, "id24"], [24, "id25"], [24, "id28"], [24, "id31"], [24, "id33"], [24, "id35"], [24, "id37"], [24, "id41"], [24, "id45"], [24, "id47"], [24, "id50"], [24, "id53"], [25, "returns"], [25, "id2"], [25, "id5"], [25, "id8"], [25, "id11"], [25, "id14"], [25, "id16"], [25, "id19"], [25, "id21"], [25, "id22"], [25, "id24"], [25, "id25"], [25, "id28"], [25, "id31"], [25, "id33"], [25, "id35"], [25, "id37"], [25, "id41"], [25, "id45"], [25, "id47"], [25, "id50"], [25, "id53"], [30, "returns"], [31, "returns"], [31, "id2"], [31, "id3"], [31, "id5"], [31, "id7"], [32, "returns"], [32, "id1"], [32, "id3"], [32, "id6"], [33, "returns"], [33, "id1"], [33, "id3"], [33, "id6"], [34, "returns"], [34, "id1"], [34, "id3"], [34, "id6"], [35, "returns"], [35, "id1"], [35, "id3"], [35, "id6"], [37, "returns"], [37, "id1"], [37, "id3"], [38, "returns"], [38, "id2"], [38, "id5"], [38, "id8"], [38, "id10"], [38, "id13"], [38, "id15"], [38, "id16"], [38, "id18"], [38, "id19"], [38, "id22"], [38, "id25"], [38, "id27"], [38, "id29"], [38, "id31"], [38, "id35"], [38, "id39"], [38, "id41"], [38, "id44"], [38, "id47"], [39, "returns"], [39, "id2"], [39, "id5"], [39, "id8"], [39, "id10"], [39, "id13"], [39, "id15"], [39, "id16"], [39, "id18"], [39, "id19"], [39, "id22"], [39, "id25"], [39, "id26"], [39, "id28"], [39, "id30"], [39, "id32"], [39, "id36"], [39, "id40"], [39, "id42"], [39, "id45"], [39, "id48"], [40, "returns"], [40, "id2"], [40, "id5"], [40, "id8"], [40, "id10"], [40, "id13"], [40, "id15"], [40, "id16"], [40, "id18"], [40, "id19"], [40, "id22"], [40, "id25"], [40, "id27"], [40, "id29"], [40, "id31"], [40, "id35"], [40, "id39"], [40, "id41"], [40, "id44"], [40, "id47"], [41, "returns"], [41, "id2"], [41, "id5"], [41, "id8"], [41, "id10"], [41, "id13"], [41, "id15"], [41, "id16"], [41, "id18"], [41, "id19"], [41, "id22"], [41, "id25"], [41, "id27"], [41, "id29"], [41, "id31"], [41, "id35"], [41, "id39"], [41, "id41"], [41, "id44"], [41, "id47"], [42, "returns"], [42, "id2"], [42, "id5"], [42, "id8"], [42, "id10"], [42, "id13"], [42, "id15"], [42, "id16"], [42, "id18"], [42, "id19"], [42, "id22"], [42, "id25"], [42, "id27"], [42, "id29"], [42, "id31"], [42, "id35"], [42, "id39"], [42, "id41"], [42, "id44"], [42, "id47"], [43, "returns"], [43, "id2"], [43, "id5"], [43, "id8"], [43, "id10"], [43, "id13"], [43, "id15"], [43, "id16"], [43, "id18"], [43, "id19"], [43, "id22"], [43, "id25"], [43, "id27"], [43, "id29"], [43, "id31"], [43, "id35"], [43, "id39"], [43, "id41"], [43, "id44"], [43, "id47"], [44, "returns"], [44, "id2"], [44, "id5"], [44, "id8"], [44, "id10"], [44, "id13"], [44, "id15"], [44, "id16"], [44, "id18"], [44, "id19"], [44, "id22"], [44, "id25"], [44, "id27"], [44, "id29"], [44, "id31"], [44, "id35"], [44, "id39"], [44, "id41"], [44, "id44"], [44, "id47"], [45, "returns"], [45, "id2"], [45, "id5"], [45, "id8"], [45, "id10"], [45, "id13"], [45, "id15"], [45, "id16"], [45, "id18"], [45, "id19"], [45, "id22"], [45, "id25"], [45, "id27"], [45, "id29"], [45, "id31"], [45, "id35"], [45, "id39"], [45, "id41"], [45, "id44"], [45, "id47"]], "Notes": [[0, "notes"], [0, "id6"], [0, "id11"], [1, "notes"], [1, "id46"], [2, "notes"], [2, "id51"], [4, "notes"], [4, "id39"], [5, "notes"], [5, "id34"], [5, "id44"], [6, "notes"], [6, "id4"], [6, "id11"], [7, "notes"], [7, "id4"], [7, "id11"], [9, "notes"], [9, "id38"], [10, "notes"], [10, "id38"], [11, "notes"], [11, "id38"], [12, "notes"], [12, "id39"], [13, "notes"], [13, "id38"], [14, "notes"], [14, "id38"], [15, "notes"], [15, "id38"], [16, "notes"], [16, "id38"], [17, "notes"], [17, "id38"], [18, "notes"], [18, "id38"], [19, "notes"], [19, "id38"], [20, "notes"], [20, "id38"], [21, "notes"], [21, "id38"], [22, "notes"], [22, "id38"], [23, "notes"], [23, "id38"], [24, "notes"], [24, "id38"], [25, "notes"], [25, "id38"], [32, "notes"], [33, "notes"], [37, "notes"], [37, "id4"], [38, "notes"], [38, "id32"], [39, "notes"], [39, "id33"], [40, "notes"], [40, "id32"], [41, "notes"], [41, "id32"], [42, "notes"], [42, "id32"], [43, "notes"], [43, "id32"], [44, "notes"], [44, "id32"], [45, "notes"], [45, "id32"]], "BasePipeline class": [[1, "basepipeline-class"]], "Examples": [[1, "examples"], [1, "id34"], [1, "id37"], [1, "id49"], [2, "examples"], [2, "id16"], [2, "id19"], [2, "id22"], [2, "id25"], [2, "id28"], [2, "id30"], [2, "id39"], [2, "id42"], [2, "id52"], [2, "id55"], [2, "id61"], [2, "id64"], [2, "id67"], [4, "examples"], [4, "id27"], [4, "id30"], [4, "id42"], [5, "examples"], [5, "id14"], [5, "id17"], [5, "id20"], [5, "id22"], [5, "id31"], [5, "id35"], [5, "id45"], [5, "id48"], [5, "id54"], [5, "id57"], [5, "id60"], [6, "examples"], [6, "id5"], [6, "id8"], [6, "id12"], [6, "id15"], [7, "examples"], [7, "id5"], [7, "id8"], [7, "id12"], [7, "id15"], [9, "examples"], [9, "id3"], [9, "id6"], [9, "id9"], [9, "id12"], [9, "id15"], [9, "id17"], [9, "id26"], [9, "id29"], [9, "id39"], [9, "id42"], [9, "id48"], [9, "id51"], [9, "id54"], [10, "examples"], [10, "id3"], [10, "id6"], [10, "id9"], [10, "id12"], [10, "id15"], [10, "id17"], [10, "id26"], [10, "id29"], [10, "id39"], [10, "id42"], [10, "id48"], [10, "id51"], [10, "id54"], [11, "examples"], [11, "id3"], [11, "id6"], [11, "id9"], [11, "id12"], [11, "id15"], [11, "id17"], [11, "id26"], [11, "id29"], [11, "id39"], [11, "id42"], [11, "id48"], [11, "id51"], [11, "id54"], [12, "examples"], [12, "id3"], [12, "id6"], [12, "id9"], [12, "id12"], [12, "id15"], [12, "id17"], [12, "id26"], [12, "id29"], [12, "id40"], [12, "id43"], [12, "id49"], [12, "id52"], [12, "id55"], [13, "examples"], [13, "id3"], [13, "id6"], [13, "id9"], [13, "id12"], [13, "id15"], [13, "id17"], [13, "id26"], [13, "id29"], [13, "id39"], [13, "id42"], [13, "id48"], [13, "id51"], [13, "id54"], [14, "examples"], [14, "id3"], [14, "id6"], [14, "id9"], [14, "id12"], [14, "id15"], [14, "id17"], [14, "id26"], [14, "id29"], [14, "id39"], [14, "id42"], [14, "id48"], [14, "id51"], [14, "id54"], [15, "examples"], [15, "id3"], [15, "id6"], [15, "id9"], [15, "id12"], [15, "id15"], [15, "id17"], [15, "id26"], [15, "id29"], [15, "id39"], [15, "id42"], [15, "id48"], [15, "id51"], [15, "id54"], [16, "examples"], [16, "id3"], [16, "id6"], [16, "id9"], [16, "id12"], [16, "id15"], [16, "id17"], [16, "id26"], [16, "id29"], [16, "id39"], [16, "id42"], [16, "id48"], [16, "id51"], [16, "id54"], [17, "examples"], [17, "id3"], [17, "id6"], [17, "id9"], [17, "id12"], [17, "id15"], [17, "id17"], [17, "id26"], [17, "id29"], [17, "id39"], [17, "id42"], [17, "id48"], [17, "id51"], [17, "id54"], [18, "examples"], [18, "id3"], [18, "id6"], [18, "id9"], [18, "id12"], [18, "id15"], [18, "id17"], [18, "id26"], [18, "id29"], [18, "id39"], [18, "id42"], [18, "id48"], [18, "id51"], [18, "id54"], [19, "examples"], [19, "id3"], [19, "id6"], [19, "id9"], [19, "id12"], [19, "id15"], [19, "id17"], [19, "id26"], [19, "id29"], [19, "id39"], [19, "id42"], [19, "id48"], [19, "id51"], [19, "id54"], [20, "examples"], [20, "id3"], [20, "id6"], [20, "id9"], [20, "id12"], [20, "id15"], [20, "id17"], [20, "id26"], [20, "id29"], [20, "id39"], [20, "id42"], [20, "id48"], [20, "id51"], [20, "id54"], [21, "examples"], [21, "id3"], [21, "id6"], [21, "id9"], [21, "id12"], [21, "id15"], [21, "id17"], [21, "id26"], [21, "id29"], [21, "id39"], [21, "id42"], [21, "id48"], [21, "id51"], [21, "id54"], [22, "examples"], [22, "id3"], [22, "id6"], [22, "id9"], [22, "id12"], [22, "id15"], [22, "id17"], [22, "id26"], [22, "id29"], [22, "id39"], [22, "id42"], [22, "id48"], [22, "id51"], [22, "id54"], [23, "examples"], [23, "id3"], [23, "id6"], [23, "id9"], [23, "id12"], [23, "id15"], [23, "id17"], [23, "id26"], [23, "id29"], [23, "id39"], [23, "id42"], [23, "id48"], [23, "id51"], [23, "id54"], [24, "examples"], [24, "id3"], [24, "id6"], [24, "id9"], [24, "id12"], [24, "id15"], [24, "id17"], [24, "id26"], [24, "id29"], [24, "id39"], [24, "id42"], [24, "id48"], [24, "id51"], [24, "id54"], [25, "examples"], [25, "id3"], [25, "id6"], [25, "id9"], [25, "id12"], [25, "id15"], [25, "id17"], [25, "id26"], [25, "id29"], [25, "id39"], [25, "id42"], [25, "id48"], [25, "id51"], [25, "id54"], [30, "examples"], [31, "examples"], [31, "id8"], [32, "examples"], [32, "id4"], [33, "examples"], [33, "id4"], [34, "examples"], [34, "id4"], [35, "examples"], [35, "id4"], [37, "examples"], [37, "id2"], [37, "id5"], [38, "examples"], [38, "id3"], [38, "id6"], [38, "id9"], [38, "id11"], [38, "id20"], [38, "id23"], [38, "id33"], [38, "id36"], [38, "id42"], [38, "id45"], [38, "id48"], [39, "examples"], [39, "id3"], [39, "id6"], [39, "id9"], [39, "id11"], [39, "id20"], [39, "id23"], [39, "id34"], [39, "id37"], [39, "id43"], [39, "id46"], [39, "id49"], [40, "examples"], [40, "id3"], [40, "id6"], [40, "id9"], [40, "id11"], [40, "id20"], [40, "id23"], [40, "id33"], [40, "id36"], [40, "id42"], [40, "id45"], [40, "id48"], [41, "examples"], [41, "id3"], [41, "id6"], [41, "id9"], [41, "id11"], [41, "id20"], [41, "id23"], [41, "id33"], [41, "id36"], [41, "id42"], [41, "id45"], [41, "id48"], [42, "examples"], [42, "id3"], [42, "id6"], [42, "id9"], [42, "id11"], [42, "id20"], [42, "id23"], [42, "id33"], [42, "id36"], [42, "id42"], [42, "id45"], [42, "id48"], [43, "examples"], [43, "id3"], [43, "id6"], [43, "id9"], [43, "id11"], [43, "id20"], [43, "id23"], [43, "id33"], [43, "id36"], [43, "id42"], [43, "id45"], [43, "id48"], [44, "examples"], [44, "id3"], [44, "id6"], [44, "id9"], [44, "id11"], [44, "id20"], [44, "id23"], [44, "id33"], [44, "id36"], [44, "id42"], [44, "id45"], [44, "id48"], [45, "examples"], [45, "id3"], [45, "id6"], [45, "id9"], [45, "id11"], [45, "id20"], [45, "id23"], [45, "id33"], [45, "id36"], [45, "id42"], [45, "id45"], [45, "id48"]], "Classifier class": [[2, "classifier-class"]], "Data class": [[3, "data-class"]], "Model class": [[4, "model-class"]], "Regressor class": [[5, "regressor-class"]], "CTest": [[6, "ctest"]], "RTest": [[7, "rtest"]], "Auto-ML": [[8, "auto-ml"]], "AdaBoostClassifier (ABC)": [[9, "adaboostclassifier-abc"]], "BaggingClassifier (BC)": [[10, "baggingclassifier-bc"]], "BernoulliNB (BNB)": [[11, "bernoullinb-bnb"]], "DecisionTreeClassifier (DTC)": [[12, "decisiontreeclassifier-dtc"]], "ExtraTreesClassifier (ETC)": [[13, "extratreesclassifier-etc"]], "GaussianNB (GNB)": [[14, "gaussiannb-gnb"]], "GaussianProcessClassifier (GPC)": [[15, "gaussianprocessclassifier-gpc"]], "GradientBoostingMachine (GBM)": [[16, "gradientboostingmachine-gbm"]], "KNeighborsClassifier (KNC)": [[17, "kneighborsclassifier-knc"]], "LinearDiscriminantAnalysis (LDA)": [[18, "lineardiscriminantanalysis-lda"]], "LinearSupportVectorClassifier (LSVC)": [[19, "linearsupportvectorclassifier-lsvc"]], "LogisticRegression (LR)": [[20, "logisticregression-lr"]], "MLP Classifier (MLPC)": [[21, "mlp-classifier-mlpc"]], "QuadraticDiscriminantAnalysis (QDA)": [[22, "quadraticdiscriminantanalysis-qda"]], "RandomForestClassifier (RFC)": [[23, "randomforestclassifier-rfc"]], "SupportVectorClassifier (SVC)": [[24, "supportvectorclassifier-svc"]], "XGBClassifier (XGBC)": [[25, "xgbclassifier-xgbc"]], "Classifier": [[26, "classifier"]], "Global Variables": [[27, "global-variables"]], "Logging": [[27, "logging"]], "n_jobs": [[27, "n-jobs"]], "Sounds On": [[27, "sounds-on"]], "Scoring Variables": [[27, "scoring-variables"]], "Welcome to sam-ml-py\u2019s documentation!": [[28, "welcome-to-sam-ml-py-s-documentation"]], "Installation": [[28, "installation"]], "with SMAC": [[28, "with-smac"]], "without SMAC": [[28, "without-smac"]], "Let\u2019s get started": [[28, "let-s-get-started"]], "Package Graph": [[29, "package-graph"]], "Pipeline Factory": [[30, "pipeline-factory"]], "Embeddings_builder": [[31, "embeddings-builder"]], "Sampler": [[32, "sampler"]], "SamplerPipeline": [[33, "samplerpipeline"]], "Scaler": [[34, "scaler"]], "Selector": [[35, "selector"]], "Preprocessing": [[36, "preprocessing"]], "Regio": [[37, "regio"]], "BayesianRidge (BYR)": [[38, "bayesianridge-byr"]], "DecisionTreeRegressor (DTR)": [[39, "decisiontreeregressor-dtr"]], "ElasticNet (EN)": [[40, "elasticnet-en"]], "ExtraTreesRegressor (ETR)": [[41, "extratreesregressor-etr"]], "LassoLarsCV (LLCV)": [[42, "lassolarscv-llcv"]], "RandomForestRegressor (RFR)": [[43, "randomforestregressor-rfr"]], "SGDRegressor (SGDR)": [[44, "sgdregressor-sgdr"]], "XGBRegressor (XGBR)": [[45, "xgbregressor-xgbr"]], "Regressor": [[46, "regressor"]], "Scoring": [[47, "scoring"]], "Classification": [[47, "classification"]], "Advanced Scoring with s_score or l_score": [[47, "advanced-scoring-with-s-score-or-l-score"]], "swig installation": [[48, "swig-installation"]], "Linux": [[48, "linux"]], "MacOS": [[48, "macos"]], "Windows": [[48, "windows"]]}, "indexentries": {"automl (built-in class)": [[0, "AutoML"]], "_automl__finish_sound() (sam_ml.models.main_auto_ml.automl static method)": [[0, "sam_ml.models.main_auto_ml.AutoML._AutoML__finish_sound"]], "_automl__sort_dict() (sam_ml.models.main_auto_ml.automl static method)": [[0, "sam_ml.models.main_auto_ml.AutoML._AutoML__sort_dict"]], "add_model() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.add_model"]], "eval_models() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.eval_models"]], "eval_models_cv() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.eval_models_cv"]], "find_best_model_mass_search() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.find_best_model_mass_search"]], "find_best_model_randomcv() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.find_best_model_randomCV"]], "find_best_model_smac() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.find_best_model_smac"]], "model_combs() (sam_ml.models.main_auto_ml.automl static method)": [[0, "sam_ml.models.main_auto_ml.AutoML.model_combs"]], "output_scores_as_pd() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.output_scores_as_pd"]], "remove_model() (sam_ml.models.main_auto_ml.automl method)": [[0, "sam_ml.models.main_auto_ml.AutoML.remove_model"]], "basepipeline (built-in class)": [[1, "BasePipeline"]], "_auto_vectorizing() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._auto_vectorizing"]], "_changed_parameters() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._changed_parameters"]], "_data_prepare() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._data_prepare"]], "_get_all_scores() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._get_all_scores"]], "_get_score() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._get_score"]], "_inherit_from_model() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._inherit_from_model"]], "_make_cv_scores() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._make_cv_scores"]], "_make_scorer() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._make_scorer"]], "_print_scores() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._print_scores"]], "_validate_component() (sam_ml.models.main_pipeline.basepipeline static method)": [[1, "sam_ml.models.main_pipeline.BasePipeline._validate_component"]], "cross_validation() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.cross_validation"]], "cross_validation_small_data() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.cross_validation_small_data"]], "evaluate() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.evaluate"]], "evaluate_score() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.evaluate_score"]], "feature_importance() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.feature_importance"]], "fit() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.fit"]], "fit_warm_start() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.fit_warm_start"]], "get_deepcopy() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.get_deepcopy"]], "get_params() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.get_params"]], "get_random_config() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.get_random_config"]], "get_random_configs() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.get_random_configs"]], "load_model() (sam_ml.models.main_pipeline.basepipeline static method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.load_model"]], "predict() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.predict"]], "predict_proba() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.predict_proba"]], "randomcvsearch() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.randomCVsearch"]], "replace_grid() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.replace_grid"]], "save_model() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.save_model"]], "set_params() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.set_params"]], "smac_search() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.smac_search"]], "train() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.train"]], "train_warm_start() (sam_ml.models.main_pipeline.basepipeline method)": [[1, "sam_ml.models.main_pipeline.BasePipeline.train_warm_start"]], "classifier (built-in class)": [[2, "Classifier"]], "_changed_parameters() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier._changed_parameters"]], "_create_prediction_proba() (sam_ml.models.main_classifier.classifier static method)": [[2, "sam_ml.models.main_classifier.Classifier._create_prediction_proba"]], "_get_all_scores() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier._get_all_scores"]], "_get_score() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier._get_score"]], "_make_cv_scores() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier._make_cv_scores"]], "_make_scorer() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier._make_scorer"]], "_print_scores() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier._print_scores"]], "cross_validation() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.cross_validation"]], "cross_validation_small_data() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.cross_validation_small_data"]], "evaluate() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.evaluate"]], "evaluate_proba() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.evaluate_proba"]], "evaluate_score() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.evaluate_score_proba"]], "feature_importance() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.feature_importance"]], "fit() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.fit"]], "fit_warm_start() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.fit_warm_start"]], "get_deepcopy() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.get_deepcopy"]], "get_params() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.get_params"]], "get_random_config() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.get_random_config"]], "get_random_configs() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.get_random_configs"]], "load_model() (sam_ml.models.main_classifier.classifier static method)": [[2, "sam_ml.models.main_classifier.Classifier.load_model"]], "predict() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.predict"]], "predict_proba() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.predict_proba"]], "randomcvsearch() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.randomCVsearch"]], "replace_grid() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.replace_grid"]], "save_model() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.save_model"]], "set_params() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.set_params"]], "smac_search() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.smac_search"]], "train() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.train"]], "train_warm_start() (sam_ml.models.main_classifier.classifier method)": [[2, "sam_ml.models.main_classifier.Classifier.train_warm_start"]], "data (built-in class)": [[3, "Data"]], "_changed_parameters() (sam_ml.data.main_data.data method)": [[3, "sam_ml.data.main_data.Data._changed_parameters"]], "get_params() (sam_ml.data.main_data.data method)": [[3, "sam_ml.data.main_data.Data.get_params"]], "params() (sam_ml.data.main_data.data static method)": [[3, "sam_ml.data.main_data.Data.params"]], "set_params() (sam_ml.data.main_data.data method)": [[3, "sam_ml.data.main_data.Data.set_params"]], "model (built-in class)": [[4, "Model"]], "_changed_parameters() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model._changed_parameters"]], "_get_all_scores() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model._get_all_scores"]], "_get_score() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model._get_score"]], "_make_cv_scores() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model._make_cv_scores"]], "_make_scorer() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model._make_scorer"]], "_print_scores() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model._print_scores"]], "cross_validation() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.cross_validation"]], "cross_validation_small_data() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.cross_validation_small_data"]], "evaluate() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.evaluate"]], "evaluate_score() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.evaluate_score"]], "feature_importance() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.feature_importance"]], "fit() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.fit"]], "fit_warm_start() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.fit_warm_start"]], "get_deepcopy() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.get_deepcopy"]], "get_params() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.get_params"]], "get_random_config() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.get_random_config"]], "get_random_configs() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.get_random_configs"]], "load_model() (sam_ml.models.main_model.model static method)": [[4, "sam_ml.models.main_model.Model.load_model"]], "predict() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.predict"]], "predict_proba() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.predict_proba"]], "randomcvsearch() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.randomCVsearch"]], "replace_grid() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.replace_grid"]], "save_model() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.save_model"]], "set_params() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.set_params"]], "smac_search() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.smac_search"]], "train() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.train"]], "train_warm_start() (sam_ml.models.main_model.model method)": [[4, "sam_ml.models.main_model.Model.train_warm_start"]], "regressor (built-in class)": [[5, "Regressor"]], "_changed_parameters() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor._changed_parameters"]], "_get_all_scores() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor._get_all_scores"]], "_get_score() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor._get_score"]], "_make_cv_scores() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor._make_cv_scores"]], "_make_scorer() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor._make_scorer"]], "_print_scores() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor._print_scores"]], "cross_validation() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.cross_validation"]], "cross_validation_small_data() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.cross_validation_small_data"]], "evaluate() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.evaluate"]], "evaluate_score() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.evaluate_score"]], "feature_importance() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.feature_importance"]], "fit() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.fit"]], "fit_warm_start() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.fit_warm_start"]], "get_deepcopy() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.get_deepcopy"]], "get_params() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.get_params"]], "get_random_config() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.get_random_config"]], "get_random_configs() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.get_random_configs"]], "load_model() (sam_ml.models.main_regressor.regressor static method)": [[5, "sam_ml.models.main_regressor.Regressor.load_model"]], "predict() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.predict"]], "predict_proba() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.predict_proba"]], "randomcvsearch() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.randomCVsearch"]], "replace_grid() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.replace_grid"]], "save_model() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.save_model"]], "set_params() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.set_params"]], "smac_search() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.smac_search"]], "train() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.train"]], "train_warm_start() (sam_ml.models.main_regressor.regressor method)": [[5, "sam_ml.models.main_regressor.Regressor.train_warm_start"]], "ctest (built-in class)": [[6, "CTest"]], "add_model() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.add_model"]], "eval_models() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.eval_models"]], "eval_models_cv() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.eval_models_cv"]], "find_best_model_mass_search() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.find_best_model_mass_search"]], "find_best_model_randomcv() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.find_best_model_randomCV"]], "find_best_model_smac() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.find_best_model_smac"]], "model_combs() (sam_ml.models.automl.classifiertest.ctest static method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.model_combs"]], "output_scores_as_pd() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.output_scores_as_pd"]], "remove_model() (sam_ml.models.automl.classifiertest.ctest method)": [[6, "sam_ml.models.automl.ClassifierTest.CTest.remove_model"]], "rtest (built-in class)": [[7, "RTest"]], "add_model() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.add_model"]], "eval_models() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.eval_models"]], "eval_models_cv() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.eval_models_cv"]], "find_best_model_mass_search() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.find_best_model_mass_search"]], "find_best_model_randomcv() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.find_best_model_randomCV"]], "find_best_model_smac() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.find_best_model_smac"]], "model_combs() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.model_combs"]], "output_scores_as_pd() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.output_scores_as_pd"]], "remove_model() (sam_ml.models.automl.regressortest.rtest method)": [[7, "sam_ml.models.automl.RegressorTest.RTest.remove_model"]], "abc (built-in class)": [[9, "ABC"]], "cross_validation() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.feature_importance"]], "fit() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.fit"]], "fit_warm_start() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.get_params"]], "get_random_config() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.get_random_configs"]], "load_model() (sam_ml.models.classifier.adaboostclassifier.abc static method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.load_model"]], "predict() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.predict"]], "predict_proba() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.replace_grid"]], "save_model() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.save_model"]], "set_params() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.set_params"]], "smac_search() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.smac_search"]], "train() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.train"]], "train_warm_start() (sam_ml.models.classifier.adaboostclassifier.abc method)": [[9, "sam_ml.models.classifier.AdaBoostClassifier.ABC.train_warm_start"]], "bc (built-in class)": [[10, "BC"]], "cross_validation() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.feature_importance"]], "fit() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.fit"]], "fit_warm_start() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.get_params"]], "get_random_config() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.get_random_configs"]], "load_model() (sam_ml.models.classifier.baggingclassifier.bc static method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.load_model"]], "predict() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.predict"]], "predict_proba() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.replace_grid"]], "save_model() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.save_model"]], "set_params() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.set_params"]], "smac_search() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.smac_search"]], "train() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.train"]], "train_warm_start() (sam_ml.models.classifier.baggingclassifier.bc method)": [[10, "sam_ml.models.classifier.BaggingClassifier.BC.train_warm_start"]], "bnb (built-in class)": [[11, "BNB"]], "cross_validation() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.feature_importance"]], "fit() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.fit"]], "fit_warm_start() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.get_deepcopy"]], "get_params() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.get_params"]], "get_random_config() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.get_random_configs"]], "load_model() (sam_ml.models.classifier.bernoullinb.bnb static method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.load_model"]], "predict() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.predict"]], "predict_proba() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.replace_grid"]], "save_model() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.save_model"]], "set_params() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.set_params"]], "smac_search() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.smac_search"]], "train() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.train"]], "train_warm_start() (sam_ml.models.classifier.bernoullinb.bnb method)": [[11, "sam_ml.models.classifier.BernoulliNB.BNB.train_warm_start"]], "dtc (built-in class)": [[12, "DTC"]], "cross_validation() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.feature_importance"]], "fit() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.fit"]], "fit_warm_start() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.get_params"]], "get_random_config() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.get_random_configs"]], "load_model() (sam_ml.models.classifier.decisiontreeclassifier.dtc static method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.load_model"]], "plot_tree() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.plot_tree"]], "predict() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.predict"]], "predict_proba() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.replace_grid"]], "save_model() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.save_model"]], "set_params() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.set_params"]], "smac_search() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.smac_search"]], "train() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.train"]], "train_warm_start() (sam_ml.models.classifier.decisiontreeclassifier.dtc method)": [[12, "sam_ml.models.classifier.DecisionTreeClassifier.DTC.train_warm_start"]], "etc (built-in class)": [[13, "ETC"]], "cross_validation() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.feature_importance"]], "fit() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.fit"]], "fit_warm_start() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.get_params"]], "get_random_config() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.get_random_configs"]], "load_model() (sam_ml.models.classifier.extratreesclassifier.etc static method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.load_model"]], "predict() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.predict"]], "predict_proba() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.replace_grid"]], "save_model() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.save_model"]], "set_params() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.set_params"]], "smac_search() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.smac_search"]], "train() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.train"]], "train_warm_start() (sam_ml.models.classifier.extratreesclassifier.etc method)": [[13, "sam_ml.models.classifier.ExtraTreesClassifier.ETC.train_warm_start"]], "gnb (built-in class)": [[14, "GNB"]], "cross_validation() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.feature_importance"]], "fit() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.fit"]], "fit_warm_start() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.get_deepcopy"]], "get_params() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.get_params"]], "get_random_config() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.get_random_configs"]], "load_model() (sam_ml.models.classifier.gaussiannb.gnb static method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.load_model"]], "predict() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.predict"]], "predict_proba() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.replace_grid"]], "save_model() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.save_model"]], "set_params() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.set_params"]], "smac_search() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.smac_search"]], "train() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.train"]], "train_warm_start() (sam_ml.models.classifier.gaussiannb.gnb method)": [[14, "sam_ml.models.classifier.GaussianNB.GNB.train_warm_start"]], "gpc (built-in class)": [[15, "GPC"]], "cross_validation() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.feature_importance"]], "fit() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.fit"]], "fit_warm_start() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.get_params"]], "get_random_config() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.get_random_configs"]], "load_model() (sam_ml.models.classifier.gaussianprocessclassifier.gpc static method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.load_model"]], "predict() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.predict"]], "predict_proba() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.replace_grid"]], "save_model() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.save_model"]], "set_params() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.set_params"]], "smac_search() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.smac_search"]], "train() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.train"]], "train_warm_start() (sam_ml.models.classifier.gaussianprocessclassifier.gpc method)": [[15, "sam_ml.models.classifier.GaussianProcessClassifier.GPC.train_warm_start"]], "gbm (built-in class)": [[16, "GBM"]], "cross_validation() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.feature_importance"]], "fit() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.fit"]], "fit_warm_start() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.get_deepcopy"]], "get_params() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.get_params"]], "get_random_config() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.get_random_configs"]], "load_model() (sam_ml.models.classifier.gradientboostingmachine.gbm static method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.load_model"]], "predict() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.predict"]], "predict_proba() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.replace_grid"]], "save_model() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.save_model"]], "set_params() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.set_params"]], "smac_search() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.smac_search"]], "train() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.train"]], "train_warm_start() (sam_ml.models.classifier.gradientboostingmachine.gbm method)": [[16, "sam_ml.models.classifier.GradientBoostingMachine.GBM.train_warm_start"]], "knc (built-in class)": [[17, "KNC"]], "cross_validation() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.feature_importance"]], "fit() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.fit"]], "fit_warm_start() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.get_params"]], "get_random_config() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.get_random_configs"]], "load_model() (sam_ml.models.classifier.kneighborsclassifier.knc static method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.load_model"]], "predict() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.predict"]], "predict_proba() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.replace_grid"]], "save_model() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.save_model"]], "set_params() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.set_params"]], "smac_search() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.smac_search"]], "train() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.train"]], "train_warm_start() (sam_ml.models.classifier.kneighborsclassifier.knc method)": [[17, "sam_ml.models.classifier.KNeighborsClassifier.KNC.train_warm_start"]], "lda (built-in class)": [[18, "LDA"]], "cross_validation() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.feature_importance"]], "fit() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.fit"]], "fit_warm_start() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.get_deepcopy"]], "get_params() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.get_params"]], "get_random_config() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.get_random_configs"]], "load_model() (sam_ml.models.classifier.lineardiscriminantanalysis.lda static method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.load_model"]], "predict() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.predict"]], "predict_proba() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.replace_grid"]], "save_model() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.save_model"]], "set_params() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.set_params"]], "smac_search() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.smac_search"]], "train() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.train"]], "train_warm_start() (sam_ml.models.classifier.lineardiscriminantanalysis.lda method)": [[18, "sam_ml.models.classifier.LinearDiscriminantAnalysis.LDA.train_warm_start"]], "lsvc (built-in class)": [[19, "LSVC"]], "cross_validation() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.feature_importance"]], "fit() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.fit"]], "fit_warm_start() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.get_params"]], "get_random_config() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.get_random_configs"]], "load_model() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc static method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.load_model"]], "predict() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.predict"]], "predict_proba() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.replace_grid"]], "save_model() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.save_model"]], "set_params() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.set_params"]], "smac_search() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.smac_search"]], "train() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.train"]], "train_warm_start() (sam_ml.models.classifier.linearsupportvectorclassifier.lsvc method)": [[19, "sam_ml.models.classifier.LinearSupportVectorClassifier.LSVC.train_warm_start"]], "lr (built-in class)": [[20, "LR"]], "cross_validation() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.feature_importance"]], "fit() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.fit"]], "fit_warm_start() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.get_deepcopy"]], "get_params() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.get_params"]], "get_random_config() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.get_random_configs"]], "load_model() (sam_ml.models.classifier.logisticregression.lr static method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.load_model"]], "predict() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.predict"]], "predict_proba() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.replace_grid"]], "save_model() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.save_model"]], "set_params() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.set_params"]], "smac_search() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.smac_search"]], "train() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.train"]], "train_warm_start() (sam_ml.models.classifier.logisticregression.lr method)": [[20, "sam_ml.models.classifier.LogisticRegression.LR.train_warm_start"]], "mlpc (built-in class)": [[21, "MLPC"]], "cross_validation() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.feature_importance"]], "fit() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.fit"]], "fit_warm_start() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.get_params"]], "get_random_config() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.get_random_configs"]], "load_model() (sam_ml.models.classifier.mlpclassifier.mlpc static method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.load_model"]], "predict() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.predict"]], "predict_proba() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.replace_grid"]], "save_model() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.save_model"]], "set_params() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.set_params"]], "smac_search() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.smac_search"]], "train() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.train"]], "train_warm_start() (sam_ml.models.classifier.mlpclassifier.mlpc method)": [[21, "sam_ml.models.classifier.MLPClassifier.MLPC.train_warm_start"]], "qda (built-in class)": [[22, "QDA"]], "cross_validation() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.feature_importance"]], "fit() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.fit"]], "fit_warm_start() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.get_deepcopy"]], "get_params() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.get_params"]], "get_random_config() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.get_random_configs"]], "load_model() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda static method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.load_model"]], "predict() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.predict"]], "predict_proba() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.replace_grid"]], "save_model() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.save_model"]], "set_params() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.set_params"]], "smac_search() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.smac_search"]], "train() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.train"]], "train_warm_start() (sam_ml.models.classifier.quadraticdiscriminantanalysis.qda method)": [[22, "sam_ml.models.classifier.QuadraticDiscriminantAnalysis.QDA.train_warm_start"]], "rfc (built-in class)": [[23, "RFC"]], "cross_validation() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.feature_importance"]], "fit() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.fit"]], "fit_warm_start() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.get_params"]], "get_random_config() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.get_random_configs"]], "load_model() (sam_ml.models.classifier.randomforestclassifier.rfc static method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.load_model"]], "predict() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.predict"]], "predict_proba() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.replace_grid"]], "save_model() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.save_model"]], "set_params() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.set_params"]], "smac_search() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.smac_search"]], "train() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.train"]], "train_warm_start() (sam_ml.models.classifier.randomforestclassifier.rfc method)": [[23, "sam_ml.models.classifier.RandomForestClassifier.RFC.train_warm_start"]], "svc (built-in class)": [[24, "SVC"]], "cross_validation() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.feature_importance"]], "fit() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.fit"]], "fit_warm_start() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.get_params"]], "get_random_config() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.get_random_configs"]], "load_model() (sam_ml.models.classifier.supportvectorclassifier.svc static method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.load_model"]], "predict() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.predict"]], "predict_proba() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.replace_grid"]], "save_model() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.save_model"]], "set_params() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.set_params"]], "smac_search() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.smac_search"]], "train() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.train"]], "train_warm_start() (sam_ml.models.classifier.supportvectorclassifier.svc method)": [[24, "sam_ml.models.classifier.SupportVectorClassifier.SVC.train_warm_start"]], "xgbc (built-in class)": [[25, "XGBC"]], "cross_validation() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.cross_validation"]], "cross_validation_small_data() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.cross_validation_small_data"]], "evaluate() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.evaluate"]], "evaluate_proba() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.evaluate_proba"]], "evaluate_score() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.evaluate_score"]], "evaluate_score_proba() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.evaluate_score_proba"]], "feature_importance() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.feature_importance"]], "fit() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.fit"]], "fit_warm_start() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.fit_warm_start"]], "get_deepcopy() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.get_deepcopy"]], "get_params() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.get_params"]], "get_random_config() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.get_random_config"]], "get_random_configs() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.get_random_configs"]], "load_model() (sam_ml.models.classifier.xgboostclassifier.xgbc static method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.load_model"]], "predict() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.predict"]], "predict_proba() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.predict_proba"]], "randomcvsearch() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.randomCVsearch"]], "replace_grid() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.replace_grid"]], "save_model() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.save_model"]], "set_params() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.set_params"]], "smac_search() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.smac_search"]], "train() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.train"]], "train_warm_start() (sam_ml.models.classifier.xgboostclassifier.xgbc method)": [[25, "sam_ml.models.classifier.XGBoostClassifier.XGBC.train_warm_start"]], "create_pipeline() (in module sam_ml.models)": [[30, "sam_ml.models.create_pipeline"]], "embeddings_builder (built-in class)": [[31, "Embeddings_builder"]], "create_parallel_bert_embeddings() (sam_ml.data.preprocessing.embeddings.embeddings_builder method)": [[31, "sam_ml.data.preprocessing.embeddings.Embeddings_builder.create_parallel_bert_embeddings"]], "get_params() (sam_ml.data.preprocessing.embeddings.embeddings_builder method)": [[31, "sam_ml.data.preprocessing.embeddings.Embeddings_builder.get_params"]], "params() (sam_ml.data.preprocessing.embeddings.embeddings_builder static method)": [[31, "sam_ml.data.preprocessing.embeddings.Embeddings_builder.params"]], "set_params() (sam_ml.data.preprocessing.embeddings.embeddings_builder method)": [[31, "sam_ml.data.preprocessing.embeddings.Embeddings_builder.set_params"]], "vectorize() (sam_ml.data.preprocessing.embeddings.embeddings_builder method)": [[31, "sam_ml.data.preprocessing.embeddings.Embeddings_builder.vectorize"]], "sampler (built-in class)": [[32, "Sampler"]], "get_params() (sam_ml.data.preprocessing.sampling.sampler method)": [[32, "sam_ml.data.preprocessing.sampling.Sampler.get_params"]], "params() (sam_ml.data.preprocessing.sampling.sampler static method)": [[32, "sam_ml.data.preprocessing.sampling.Sampler.params"]], "sample() (sam_ml.data.preprocessing.sampling.sampler method)": [[32, "sam_ml.data.preprocessing.sampling.Sampler.sample"]], "set_params() (sam_ml.data.preprocessing.sampling.sampler method)": [[32, "sam_ml.data.preprocessing.sampling.Sampler.set_params"]], "samplerpipeline (built-in class)": [[33, "SamplerPipeline"]], "get_params() (sam_ml.data.preprocessing.sampling_pipeline.samplerpipeline method)": [[33, "sam_ml.data.preprocessing.sampling_pipeline.SamplerPipeline.get_params"]], "params() (sam_ml.data.preprocessing.sampling_pipeline.samplerpipeline static method)": [[33, "sam_ml.data.preprocessing.sampling_pipeline.SamplerPipeline.params"]], "sample() (sam_ml.data.preprocessing.sampling_pipeline.samplerpipeline method)": [[33, "sam_ml.data.preprocessing.sampling_pipeline.SamplerPipeline.sample"]], "set_params() (sam_ml.data.preprocessing.sampling_pipeline.samplerpipeline method)": [[33, "sam_ml.data.preprocessing.sampling_pipeline.SamplerPipeline.set_params"]], "scaler (built-in class)": [[34, "Scaler"]], "get_params() (sam_ml.data.preprocessing.scaler.scaler method)": [[34, "sam_ml.data.preprocessing.scaler.Scaler.get_params"]], "params() (sam_ml.data.preprocessing.scaler.scaler static method)": [[34, "sam_ml.data.preprocessing.scaler.Scaler.params"]], "scale() (sam_ml.data.preprocessing.scaler.scaler method)": [[34, "sam_ml.data.preprocessing.scaler.Scaler.scale"]], "set_params() (sam_ml.data.preprocessing.scaler.scaler method)": [[34, "sam_ml.data.preprocessing.scaler.Scaler.set_params"]], "selector (built-in class)": [[35, "Selector"]], "get_params() (sam_ml.data.preprocessing.feature_selection.selector method)": [[35, "sam_ml.data.preprocessing.feature_selection.Selector.get_params"]], "params() (sam_ml.data.preprocessing.feature_selection.selector static method)": [[35, "sam_ml.data.preprocessing.feature_selection.Selector.params"]], "select() (sam_ml.data.preprocessing.feature_selection.selector method)": [[35, "sam_ml.data.preprocessing.feature_selection.Selector.select"]], "set_params() (sam_ml.data.preprocessing.feature_selection.selector method)": [[35, "sam_ml.data.preprocessing.feature_selection.Selector.set_params"]], "get_coord_main_cities() (in module sam_ml.data.regio)": [[37, "sam_ml.data.regio.get_coord_main_cities"]], "get_plz_mapping() (in module sam_ml.data.regio)": [[37, "sam_ml.data.regio.get_plz_mapping"]], "module": [[37, "module-sam_ml.data.regio"]], "sam_ml.data.regio": [[37, "module-sam_ml.data.regio"]], "visualise_plz() (in module sam_ml.data.regio)": [[37, "sam_ml.data.regio.visualise_plz"]], "byr (built-in class)": [[38, "BYR"]], "cross_validation() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.evaluate"]], "evaluate_score() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.feature_importance"]], "fit() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.fit"]], "fit_warm_start() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.get_deepcopy"]], "get_params() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.get_params"]], "get_random_config() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.get_random_configs"]], "load_model() (sam_ml.models.regressor.bayesianridge.byr static method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.load_model"]], "predict() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.predict"]], "predict_proba() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.replace_grid"]], "save_model() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.save_model"]], "set_params() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.set_params"]], "smac_search() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.smac_search"]], "train() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.train"]], "train_warm_start() (sam_ml.models.regressor.bayesianridge.byr method)": [[38, "sam_ml.models.regressor.BayesianRidge.BYR.train_warm_start"]], "dtr (built-in class)": [[39, "DTR"]], "cross_validation() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.evaluate"]], "evaluate_score() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.feature_importance"]], "fit() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.fit"]], "fit_warm_start() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.get_deepcopy"]], "get_params() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.get_params"]], "get_random_config() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.get_random_configs"]], "load_model() (sam_ml.models.regressor.decisiontreeregressor.dtr static method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.load_model"]], "plot_tree() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.plot_tree"]], "predict() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.predict"]], "predict_proba() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.replace_grid"]], "save_model() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.save_model"]], "set_params() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.set_params"]], "smac_search() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.smac_search"]], "train() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.train"]], "train_warm_start() (sam_ml.models.regressor.decisiontreeregressor.dtr method)": [[39, "sam_ml.models.regressor.DecisionTreeRegressor.DTR.train_warm_start"]], "en (built-in class)": [[40, "EN"]], "cross_validation() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.evaluate"]], "evaluate_score() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.feature_importance"]], "fit() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.fit"]], "fit_warm_start() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.get_deepcopy"]], "get_params() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.get_params"]], "get_random_config() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.get_random_configs"]], "load_model() (sam_ml.models.regressor.elasticnet.en static method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.load_model"]], "predict() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.predict"]], "predict_proba() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.replace_grid"]], "save_model() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.save_model"]], "set_params() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.set_params"]], "smac_search() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.smac_search"]], "train() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.train"]], "train_warm_start() (sam_ml.models.regressor.elasticnet.en method)": [[40, "sam_ml.models.regressor.ElasticNet.EN.train_warm_start"]], "etr (built-in class)": [[41, "ETR"]], "cross_validation() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.evaluate"]], "evaluate_score() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.feature_importance"]], "fit() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.fit"]], "fit_warm_start() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.get_deepcopy"]], "get_params() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.get_params"]], "get_random_config() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.get_random_configs"]], "load_model() (sam_ml.models.regressor.extratreesregressor.etr static method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.load_model"]], "predict() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.predict"]], "predict_proba() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.replace_grid"]], "save_model() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.save_model"]], "set_params() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.set_params"]], "smac_search() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.smac_search"]], "train() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.train"]], "train_warm_start() (sam_ml.models.regressor.extratreesregressor.etr method)": [[41, "sam_ml.models.regressor.ExtraTreesRegressor.ETR.train_warm_start"]], "llcv (built-in class)": [[42, "LLCV"]], "cross_validation() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.evaluate"]], "evaluate_score() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.feature_importance"]], "fit() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.fit"]], "fit_warm_start() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.get_deepcopy"]], "get_params() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.get_params"]], "get_random_config() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.get_random_configs"]], "load_model() (sam_ml.models.regressor.lassolarscv.llcv static method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.load_model"]], "predict() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.predict"]], "predict_proba() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.replace_grid"]], "save_model() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.save_model"]], "set_params() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.set_params"]], "smac_search() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.smac_search"]], "train() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.train"]], "train_warm_start() (sam_ml.models.regressor.lassolarscv.llcv method)": [[42, "sam_ml.models.regressor.LassoLarsCV.LLCV.train_warm_start"]], "rfr (built-in class)": [[43, "RFR"]], "cross_validation() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.evaluate"]], "evaluate_score() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.feature_importance"]], "fit() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.fit"]], "fit_warm_start() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.get_deepcopy"]], "get_params() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.get_params"]], "get_random_config() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.get_random_configs"]], "load_model() (sam_ml.models.regressor.randomforestregressor.rfr static method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.load_model"]], "predict() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.predict"]], "predict_proba() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.replace_grid"]], "save_model() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.save_model"]], "set_params() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.set_params"]], "smac_search() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.smac_search"]], "train() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.train"]], "train_warm_start() (sam_ml.models.regressor.randomforestregressor.rfr method)": [[43, "sam_ml.models.regressor.RandomForestRegressor.RFR.train_warm_start"]], "sgdr (built-in class)": [[44, "SGDR"]], "cross_validation() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.evaluate"]], "evaluate_score() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.feature_importance"]], "fit() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.fit"]], "fit_warm_start() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.get_deepcopy"]], "get_params() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.get_params"]], "get_random_config() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.get_random_configs"]], "load_model() (sam_ml.models.regressor.sgdregressor.sgdr static method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.load_model"]], "predict() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.predict"]], "predict_proba() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.replace_grid"]], "save_model() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.save_model"]], "set_params() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.set_params"]], "smac_search() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.smac_search"]], "train() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.train"]], "train_warm_start() (sam_ml.models.regressor.sgdregressor.sgdr method)": [[44, "sam_ml.models.regressor.SGDRegressor.SGDR.train_warm_start"]], "xgbr (built-in class)": [[45, "XGBR"]], "cross_validation() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.cross_validation"]], "cross_validation_small_data() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.cross_validation_small_data"]], "evaluate() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.evaluate"]], "evaluate_score() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.evaluate_score"]], "feature_importance() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.feature_importance"]], "fit() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.fit"]], "fit_warm_start() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.fit_warm_start"]], "get_deepcopy() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.get_deepcopy"]], "get_params() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.get_params"]], "get_random_config() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.get_random_config"]], "get_random_configs() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.get_random_configs"]], "load_model() (sam_ml.models.regressor.xgboostregressor.xgbr static method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.load_model"]], "predict() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.predict"]], "predict_proba() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.predict_proba"]], "randomcvsearch() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.randomCVsearch"]], "replace_grid() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.replace_grid"]], "save_model() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.save_model"]], "set_params() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.set_params"]], "smac_search() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.smac_search"]], "train() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.train"]], "train_warm_start() (sam_ml.models.regressor.xgboostregressor.xgbr method)": [[45, "sam_ml.models.regressor.XGBoostRegressor.XGBR.train_warm_start"]]}})